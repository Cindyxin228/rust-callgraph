Target name: example_code
The code is Ok(
    "{\n    ob.bla();\n}",
)
Entering expr: Block(
    Block {
        stmts: [
            Stmt {
                hir_id: HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).7),
                kind: Semi(
                    Expr {
                        hir_id: HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).3),
                        kind: MethodCall(
                            PathSegment {
                                ident: bla#0,
                                hir_id: HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).4),
                                res: Err,
                                args: None,
                                infer_args: true,
                            },
                            Expr {
                                hir_id: HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).5),
                                kind: Path(
                                    Resolved(
                                        None,
                                        Path {
                                            span: src/a/fun_method.rs:87:5: 87:7 (#0),
                                            res: Local(
                                                HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).2),
                                            ),
                                            segments: [
                                                PathSegment {
                                                    ident: ob#0,
                                                    hir_id: HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).6),
                                                    res: Local(
                                                        HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).2),
                                                    ),
                                                    args: None,
                                                    infer_args: true,
                                                },
                                            ],
                                        },
                                    ),
                                ),
                                span: src/a/fun_method.rs:87:5: 87:7 (#0),
                            },
                            [],
                            src/a/fun_method.rs:87:8: 87:13 (#0),
                        ),
                        span: src/a/fun_method.rs:87:5: 87:13 (#0),
                    },
                ),
                span: src/a/fun_method.rs:87:5: 87:14 (#0),
            },
        ],
        expr: None,
        hir_id: HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).8),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:86:26: 88:2 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "ob.bla()",
)
Entering expr: MethodCall(
    PathSegment {
        ident: bla#0,
        hir_id: HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).4),
        res: Err,
        args: None,
        infer_args: true,
    },
    Expr {
        hir_id: HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).5),
        kind: Path(
            Resolved(
                None,
                Path {
                    span: src/a/fun_method.rs:87:5: 87:7 (#0),
                    res: Local(
                        HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).2),
                    ),
                    segments: [
                        PathSegment {
                            ident: ob#0,
                            hir_id: HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).6),
                            res: Local(
                                HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).2),
                            ),
                            args: None,
                            infer_args: true,
                        },
                    ],
                },
            ),
        ),
        span: src/a/fun_method.rs:87:5: 87:7 (#0),
    },
    [],
    src/a/fun_method.rs:87:8: 87:13 (#0),
)
new dynamiccall: Call {
    call_expr: HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).3),
    call_expr_span: src/a/fun_method.rs:87:5: 87:13 (#0),
    caller: Some(
        DefId(0:30 ~ example_code[e214]::a::fun_method::_virt),
    ),
    caller_span: None,
    callee: DefId(0:6 ~ example_code[e214]::a::fun_method::T::bla),
    callee_span: src/a/fun_method.rs:4:5: 4:56 (#0),
    callee_path: "a::fun_method::T::bla",
    constraint_depth: 0,
}
The code is Ok(
    "ob",
)
Entering expr: Path(
    Resolved(
        None,
        Path {
            span: src/a/fun_method.rs:87:5: 87:7 (#0),
            res: Local(
                HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).2),
            ),
            segments: [
                PathSegment {
                    ident: ob#0,
                    hir_id: HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).6),
                    res: Local(
                        HirId(DefId(0:30 ~ example_code[e214]::a::fun_method::_virt).2),
                    ),
                    args: None,
                    infer_args: true,
                },
            ],
        },
    ),
)
The code is Ok(
    "{\n    // 示例，假设我们在这里有一些逻辑\n    println!(\"test_between_module called\");\n    true\n}",
)
Entering expr: Block(
    Block {
        stmts: [
            Stmt {
                hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).21),
                kind: Semi(
                    Expr {
                        hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).5),
                        kind: Block(
                            Block {
                                stmts: [
                                    Stmt {
                                        hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).19),
                                        kind: Semi(
                                            Expr {
                                                hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).6),
                                                kind: Call(
                                                    Expr {
                                                        hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).7),
                                                        kind: Path(
                                                            Resolved(
                                                                None,
                                                                Path {
                                                                    span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:9: 143:27 (#9),
                                                                    res: Def(
                                                                        Fn,
                                                                        DefId(1:3520 ~ std[5b0f]::io::stdio::_print),
                                                                    ),
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: $crate#9,
                                                                            hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).8),
                                                                            res: Err,
                                                                            args: None,
                                                                            infer_args: true,
                                                                        },
                                                                        PathSegment {
                                                                            ident: io#9,
                                                                            hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).9),
                                                                            res: Def(
                                                                                Mod,
                                                                                DefId(1:2568 ~ std[5b0f]::io),
                                                                            ),
                                                                            args: None,
                                                                            infer_args: true,
                                                                        },
                                                                        PathSegment {
                                                                            ident: _print#9,
                                                                            hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).10),
                                                                            res: Def(
                                                                                Fn,
                                                                                DefId(1:3520 ~ std[5b0f]::io::stdio::_print),
                                                                            ),
                                                                            args: None,
                                                                            infer_args: true,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:9: 143:27 (#9),
                                                    },
                                                    [
                                                        Expr {
                                                            hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).11),
                                                            kind: Call(
                                                                Expr {
                                                                    hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).18),
                                                                    kind: Path(
                                                                        TypeRelative(
                                                                            Ty {
                                                                                hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).16),
                                                                                kind: Path(
                                                                                    Resolved(
                                                                                        None,
                                                                                        Path {
                                                                                            span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#10),
                                                                                            res: Def(
                                                                                                Struct,
                                                                                                DefId(2:46484 ~ core[f118]::fmt::Arguments),
                                                                                            ),
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: format_arguments#10,
                                                                                                    hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).15),
                                                                                                    res: Def(
                                                                                                        Struct,
                                                                                                        DefId(2:46484 ~ core[f118]::fmt::Arguments),
                                                                                                    ),
                                                                                                    args: None,
                                                                                                    infer_args: true,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ),
                                                                                span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#10),
                                                                            },
                                                                            PathSegment {
                                                                                ident: new_const#10,
                                                                                hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).17),
                                                                                res: Err,
                                                                                args: None,
                                                                                infer_args: true,
                                                                            },
                                                                        ),
                                                                    ),
                                                                    span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#10),
                                                                },
                                                                [
                                                                    Expr {
                                                                        hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).14),
                                                                        kind: AddrOf(
                                                                            Ref,
                                                                            Not,
                                                                            Expr {
                                                                                hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).13),
                                                                                kind: Array(
                                                                                    [
                                                                                        Expr {
                                                                                            hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).12),
                                                                                            kind: Lit(
                                                                                                Spanned {
                                                                                                    node: Str(
                                                                                                        "test_between_module called\n",
                                                                                                        Cooked,
                                                                                                    ),
                                                                                                    span: src/a/fun_method.rs:97:14: 97:42 (#0),
                                                                                                },
                                                                                            ),
                                                                                            span: src/a/fun_method.rs:97:14: 97:42 (#0),
                                                                                        },
                                                                                    ],
                                                                                ),
                                                                                span: src/a/fun_method.rs:97:14: 97:42 (#0),
                                                                            },
                                                                        ),
                                                                        span: src/a/fun_method.rs:97:14: 97:42 (#0),
                                                                    },
                                                                ],
                                                            ),
                                                            span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#10),
                                                        },
                                                    ],
                                                ),
                                                span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:9: 143:62 (#9),
                                            },
                                        ),
                                        span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:9: 143:63 (#9),
                                    },
                                ],
                                expr: None,
                                hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).20),
                                rules: DefaultBlock,
                                span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:142:23: 144:6 (#9),
                                targeted_by_break: false,
                            },
                            None,
                        ),
                        span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:142:23: 144:6 (#9),
                    },
                ),
                span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:142:23: 144:6 (#9),
            },
        ],
        expr: Some(
            Expr {
                hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).22),
                kind: Lit(
                    Spanned {
                        node: Bool(
                            true,
                        ),
                        span: src/a/fun_method.rs:98:5: 98:9 (#0),
                    },
                ),
                span: src/a/fun_method.rs:98:5: 98:9 (#0),
            },
        ),
        hir_id: HirId(DefId(0:31 ~ example_code[e214]::a::fun_method::test_between_module).23),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:95:1: 99:2 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "true",
)
Entering expr: Lit(
    Spanned {
        node: Bool(
            true,
        ),
        span: src/a/fun_method.rs:98:5: 98:9 (#0),
    },
)
The code is Ok(
    "{\n    // 假设这个函数对字符做一些处理\n    if deny_list.contains(&c) {\n        return '*'; // 如果字符在 deny_list 中，返回 '*'\n    }\n    c // 否则返回原字符\n}",
)
Entering expr: Block(
    Block {
        stmts: [
            Stmt {
                hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).19),
                kind: Expr(
                    Expr {
                        hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).5),
                        kind: If(
                            Expr {
                                hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).13),
                                kind: DropTemps(
                                    Expr {
                                        hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).6),
                                        kind: MethodCall(
                                            PathSegment {
                                                ident: contains#0,
                                                hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).7),
                                                res: Err,
                                                args: None,
                                                infer_args: true,
                                            },
                                            Expr {
                                                hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).8),
                                                kind: Path(
                                                    Resolved(
                                                        None,
                                                        Path {
                                                            span: src/a/fun_method.rs:103:8: 103:17 (#0),
                                                            res: Local(
                                                                HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).4),
                                                            ),
                                                            segments: [
                                                                PathSegment {
                                                                    ident: deny_list#0,
                                                                    hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).9),
                                                                    res: Local(
                                                                        HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).4),
                                                                    ),
                                                                    args: None,
                                                                    infer_args: true,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                span: src/a/fun_method.rs:103:8: 103:17 (#0),
                                            },
                                            [
                                                Expr {
                                                    hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).10),
                                                    kind: AddrOf(
                                                        Ref,
                                                        Not,
                                                        Expr {
                                                            hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).11),
                                                            kind: Path(
                                                                Resolved(
                                                                    None,
                                                                    Path {
                                                                        span: src/a/fun_method.rs:103:28: 103:29 (#0),
                                                                        res: Local(
                                                                            HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).2),
                                                                        ),
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: c#0,
                                                                                hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).12),
                                                                                res: Local(
                                                                                    HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).2),
                                                                                ),
                                                                                args: None,
                                                                                infer_args: true,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ),
                                                            span: src/a/fun_method.rs:103:28: 103:29 (#0),
                                                        },
                                                    ),
                                                    span: src/a/fun_method.rs:103:27: 103:29 (#0),
                                                },
                                            ],
                                            src/a/fun_method.rs:103:18: 103:30 (#0),
                                        ),
                                        span: src/a/fun_method.rs:103:8: 103:30 (#0),
                                    },
                                ),
                                span: src/a/fun_method.rs:103:8: 103:30 (#16),
                            },
                            Expr {
                                hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).18),
                                kind: Block(
                                    Block {
                                        stmts: [
                                            Stmt {
                                                hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).16),
                                                kind: Semi(
                                                    Expr {
                                                        hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).14),
                                                        kind: Ret(
                                                            Some(
                                                                Expr {
                                                                    hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).15),
                                                                    kind: Lit(
                                                                        Spanned {
                                                                            node: Char(
                                                                                '*',
                                                                            ),
                                                                            span: src/a/fun_method.rs:104:16: 104:19 (#0),
                                                                        },
                                                                    ),
                                                                    span: src/a/fun_method.rs:104:16: 104:19 (#0),
                                                                },
                                                            ),
                                                        ),
                                                        span: src/a/fun_method.rs:104:9: 104:19 (#0),
                                                    },
                                                ),
                                                span: src/a/fun_method.rs:104:9: 104:20 (#0),
                                            },
                                        ],
                                        expr: None,
                                        hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).17),
                                        rules: DefaultBlock,
                                        span: src/a/fun_method.rs:103:31: 105:6 (#0),
                                        targeted_by_break: false,
                                    },
                                    None,
                                ),
                                span: src/a/fun_method.rs:103:31: 105:6 (#0),
                            },
                            None,
                        ),
                        span: src/a/fun_method.rs:103:5: 105:6 (#0),
                    },
                ),
                span: src/a/fun_method.rs:103:5: 105:6 (#0),
            },
        ],
        expr: Some(
            Expr {
                hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).20),
                kind: Path(
                    Resolved(
                        None,
                        Path {
                            span: src/a/fun_method.rs:106:5: 106:6 (#0),
                            res: Local(
                                HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).2),
                            ),
                            segments: [
                                PathSegment {
                                    ident: c#0,
                                    hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).21),
                                    res: Local(
                                        HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).2),
                                    ),
                                    args: None,
                                    infer_args: true,
                                },
                            ],
                        },
                    ),
                ),
                span: src/a/fun_method.rs:106:5: 106:6 (#0),
            },
        ),
        hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).22),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:101:99: 107:2 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "if deny_list.contains(&c) {\n        return '*'; // 如果字符在 deny_list 中，返回 '*'\n    }",
)
Entering expr: If(
    Expr {
        hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).13),
        kind: DropTemps(
            Expr {
                hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).6),
                kind: MethodCall(
                    PathSegment {
                        ident: contains#0,
                        hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).7),
                        res: Err,
                        args: None,
                        infer_args: true,
                    },
                    Expr {
                        hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).8),
                        kind: Path(
                            Resolved(
                                None,
                                Path {
                                    span: src/a/fun_method.rs:103:8: 103:17 (#0),
                                    res: Local(
                                        HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).4),
                                    ),
                                    segments: [
                                        PathSegment {
                                            ident: deny_list#0,
                                            hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).9),
                                            res: Local(
                                                HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).4),
                                            ),
                                            args: None,
                                            infer_args: true,
                                        },
                                    ],
                                },
                            ),
                        ),
                        span: src/a/fun_method.rs:103:8: 103:17 (#0),
                    },
                    [
                        Expr {
                            hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).10),
                            kind: AddrOf(
                                Ref,
                                Not,
                                Expr {
                                    hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).11),
                                    kind: Path(
                                        Resolved(
                                            None,
                                            Path {
                                                span: src/a/fun_method.rs:103:28: 103:29 (#0),
                                                res: Local(
                                                    HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).2),
                                                ),
                                                segments: [
                                                    PathSegment {
                                                        ident: c#0,
                                                        hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).12),
                                                        res: Local(
                                                            HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).2),
                                                        ),
                                                        args: None,
                                                        infer_args: true,
                                                    },
                                                ],
                                            },
                                        ),
                                    ),
                                    span: src/a/fun_method.rs:103:28: 103:29 (#0),
                                },
                            ),
                            span: src/a/fun_method.rs:103:27: 103:29 (#0),
                        },
                    ],
                    src/a/fun_method.rs:103:18: 103:30 (#0),
                ),
                span: src/a/fun_method.rs:103:8: 103:30 (#0),
            },
        ),
        span: src/a/fun_method.rs:103:8: 103:30 (#16),
    },
    Expr {
        hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).18),
        kind: Block(
            Block {
                stmts: [
                    Stmt {
                        hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).16),
                        kind: Semi(
                            Expr {
                                hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).14),
                                kind: Ret(
                                    Some(
                                        Expr {
                                            hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).15),
                                            kind: Lit(
                                                Spanned {
                                                    node: Char(
                                                        '*',
                                                    ),
                                                    span: src/a/fun_method.rs:104:16: 104:19 (#0),
                                                },
                                            ),
                                            span: src/a/fun_method.rs:104:16: 104:19 (#0),
                                        },
                                    ),
                                ),
                                span: src/a/fun_method.rs:104:9: 104:19 (#0),
                            },
                        ),
                        span: src/a/fun_method.rs:104:9: 104:20 (#0),
                    },
                ],
                expr: None,
                hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).17),
                rules: DefaultBlock,
                span: src/a/fun_method.rs:103:31: 105:6 (#0),
                targeted_by_break: false,
            },
            None,
        ),
        span: src/a/fun_method.rs:103:31: 105:6 (#0),
    },
    None,
)
The code is Ok(
    "{\n        return '*'; // 如果字符在 deny_list 中，返回 '*'\n    }",
)
Entering expr: Block(
    Block {
        stmts: [
            Stmt {
                hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).16),
                kind: Semi(
                    Expr {
                        hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).14),
                        kind: Ret(
                            Some(
                                Expr {
                                    hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).15),
                                    kind: Lit(
                                        Spanned {
                                            node: Char(
                                                '*',
                                            ),
                                            span: src/a/fun_method.rs:104:16: 104:19 (#0),
                                        },
                                    ),
                                    span: src/a/fun_method.rs:104:16: 104:19 (#0),
                                },
                            ),
                        ),
                        span: src/a/fun_method.rs:104:9: 104:19 (#0),
                    },
                ),
                span: src/a/fun_method.rs:104:9: 104:20 (#0),
            },
        ],
        expr: None,
        hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).17),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:103:31: 105:6 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "return '*'",
)
Entering expr: Ret(
    Some(
        Expr {
            hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).15),
            kind: Lit(
                Spanned {
                    node: Char(
                        '*',
                    ),
                    span: src/a/fun_method.rs:104:16: 104:19 (#0),
                },
            ),
            span: src/a/fun_method.rs:104:16: 104:19 (#0),
        },
    ),
)
The code is Ok(
    "'*'",
)
Entering expr: Lit(
    Spanned {
        node: Char(
            '*',
        ),
        span: src/a/fun_method.rs:104:16: 104:19 (#0),
    },
)
The code is Ok(
    "c",
)
Entering expr: Path(
    Resolved(
        None,
        Path {
            span: src/a/fun_method.rs:106:5: 106:6 (#0),
            res: Local(
                HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).2),
            ),
            segments: [
                PathSegment {
                    ident: c#0,
                    hir_id: HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).21),
                    res: Local(
                        HirId(DefId(0:34 ~ example_code[e214]::a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii).2),
                    ),
                    args: None,
                    infer_args: true,
                },
            ],
        },
    ),
)
The code is Ok(
    "{\n    let s = S {};\n    let r = R {};\n\n    // // 测试 if 表达式\n    // s.met();\n\n    // // for loop\n    // for i in 0..3 {\n    //     println!(\"Loop iteration: {}\", i);\n    //     if S1::should_call_bla(i) {\n    //         s.bla();\n    //     }\n    // }\n\n    // 测试嵌套 if 和函数调用\n    // if S1::should_call_bla(1) && S1::should_call_bla1(2) {\n    //     s.bla();\n    // }\n\n\n    // // 测试复杂条件\n    // let mut count = 0;\n    // while count < 5 {\n    //     if S1::should_call_bla2(count) {\n    //         println!(\"Count matches condition: {}\", count);\n    //     }\n    //     count += 1;\n    // }\n    let mut a = 0;\n    //just loop\n    // loop {\n    //     a += 1;\n    //     if s.test_while(a) >= 10 {\n    //         break;\n    //     }\n    // }\n\n    //while loop\n    while (s.test_while(a) < 10 || s.test_while1(a) < 10) {\n        a += 1;\n    }\n}",
)
Entering expr: Block(
    Block {
        stmts: [
            Stmt {
                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).1),
                kind: Let(
                    LetStmt {
                        pat: Pat {
                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).5),
                            kind: Binding(
                                BindingMode(
                                    No,
                                    Not,
                                ),
                                HirId(DefId(0:41 ~ example_code[e214]::main).5),
                                s#0,
                                None,
                            ),
                            span: src/main.rs:5:9: 5:10 (#0),
                            default_binding_modes: true,
                        },
                        ty: None,
                        init: Some(
                            Expr {
                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).2),
                                kind: Struct(
                                    Resolved(
                                        None,
                                        Path {
                                            span: src/main.rs:5:13: 5:14 (#0),
                                            res: Def(
                                                Struct,
                                                DefId(0:7 ~ example_code[e214]::a::fun_method::S),
                                            ),
                                            segments: [
                                                PathSegment {
                                                    ident: S#0,
                                                    hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).3),
                                                    res: Def(
                                                        Struct,
                                                        DefId(0:7 ~ example_code[e214]::a::fun_method::S),
                                                    ),
                                                    args: None,
                                                    infer_args: true,
                                                },
                                            ],
                                        },
                                    ),
                                    [],
                                    None,
                                ),
                                span: src/main.rs:5:13: 5:17 (#0),
                            },
                        ),
                        els: None,
                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).4),
                        span: src/main.rs:5:5: 5:18 (#0),
                        source: Normal,
                    },
                ),
                span: src/main.rs:5:5: 5:18 (#0),
            },
            Stmt {
                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).6),
                kind: Let(
                    LetStmt {
                        pat: Pat {
                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).10),
                            kind: Binding(
                                BindingMode(
                                    No,
                                    Not,
                                ),
                                HirId(DefId(0:41 ~ example_code[e214]::main).10),
                                r#0,
                                None,
                            ),
                            span: src/main.rs:6:9: 6:10 (#0),
                            default_binding_modes: true,
                        },
                        ty: None,
                        init: Some(
                            Expr {
                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).7),
                                kind: Struct(
                                    Resolved(
                                        None,
                                        Path {
                                            span: src/main.rs:6:13: 6:14 (#0),
                                            res: Def(
                                                Struct,
                                                DefId(0:26 ~ example_code[e214]::a::fun_method::R),
                                            ),
                                            segments: [
                                                PathSegment {
                                                    ident: R#0,
                                                    hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).8),
                                                    res: Def(
                                                        Struct,
                                                        DefId(0:26 ~ example_code[e214]::a::fun_method::R),
                                                    ),
                                                    args: None,
                                                    infer_args: true,
                                                },
                                            ],
                                        },
                                    ),
                                    [],
                                    None,
                                ),
                                span: src/main.rs:6:13: 6:17 (#0),
                            },
                        ),
                        els: None,
                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).9),
                        span: src/main.rs:6:5: 6:18 (#0),
                        source: Normal,
                    },
                ),
                span: src/main.rs:6:5: 6:18 (#0),
            },
            Stmt {
                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).11),
                kind: Let(
                    LetStmt {
                        pat: Pat {
                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).14),
                            kind: Binding(
                                BindingMode(
                                    No,
                                    Mut,
                                ),
                                HirId(DefId(0:41 ~ example_code[e214]::main).14),
                                a#0,
                                None,
                            ),
                            span: src/main.rs:33:9: 33:14 (#0),
                            default_binding_modes: true,
                        },
                        ty: None,
                        init: Some(
                            Expr {
                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).12),
                                kind: Lit(
                                    Spanned {
                                        node: Int(
                                            Pu128(
                                                0,
                                            ),
                                            Unsuffixed,
                                        ),
                                        span: src/main.rs:33:17: 33:18 (#0),
                                    },
                                ),
                                span: src/main.rs:33:17: 33:18 (#0),
                            },
                        ),
                        els: None,
                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).13),
                        span: src/main.rs:33:5: 33:19 (#0),
                        source: Normal,
                    },
                ),
                span: src/main.rs:33:5: 33:19 (#0),
            },
        ],
        expr: Some(
            Expr {
                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).15),
                kind: Loop(
                    Block {
                        stmts: [],
                        expr: Some(
                            Expr {
                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).45),
                                kind: If(
                                    Expr {
                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).33),
                                        kind: DropTemps(
                                            Expr {
                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).16),
                                                kind: Binary(
                                                    Spanned {
                                                        node: Or,
                                                        span: src/main.rs:43:33: 43:35 (#0),
                                                    },
                                                    Expr {
                                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).17),
                                                        kind: Binary(
                                                            Spanned {
                                                                node: Lt,
                                                                span: src/main.rs:43:28: 43:29 (#0),
                                                            },
                                                            Expr {
                                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).18),
                                                                kind: MethodCall(
                                                                    PathSegment {
                                                                        ident: test_while#0,
                                                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).19),
                                                                        res: Err,
                                                                        args: None,
                                                                        infer_args: true,
                                                                    },
                                                                    Expr {
                                                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).20),
                                                                        kind: Path(
                                                                            Resolved(
                                                                                None,
                                                                                Path {
                                                                                    span: src/main.rs:43:12: 43:13 (#0),
                                                                                    res: Local(
                                                                                        HirId(DefId(0:41 ~ example_code[e214]::main).5),
                                                                                    ),
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: s#0,
                                                                                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).21),
                                                                                            res: Local(
                                                                                                HirId(DefId(0:41 ~ example_code[e214]::main).5),
                                                                                            ),
                                                                                            args: None,
                                                                                            infer_args: true,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                        span: src/main.rs:43:12: 43:13 (#0),
                                                                    },
                                                                    [
                                                                        Expr {
                                                                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).22),
                                                                            kind: Path(
                                                                                Resolved(
                                                                                    None,
                                                                                    Path {
                                                                                        span: src/main.rs:43:25: 43:26 (#0),
                                                                                        res: Local(
                                                                                            HirId(DefId(0:41 ~ example_code[e214]::main).14),
                                                                                        ),
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: a#0,
                                                                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).23),
                                                                                                res: Local(
                                                                                                    HirId(DefId(0:41 ~ example_code[e214]::main).14),
                                                                                                ),
                                                                                                args: None,
                                                                                                infer_args: true,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ),
                                                                            span: src/main.rs:43:25: 43:26 (#0),
                                                                        },
                                                                    ],
                                                                    src/main.rs:43:14: 43:27 (#0),
                                                                ),
                                                                span: src/main.rs:43:12: 43:27 (#0),
                                                            },
                                                            Expr {
                                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).24),
                                                                kind: Lit(
                                                                    Spanned {
                                                                        node: Int(
                                                                            Pu128(
                                                                                10,
                                                                            ),
                                                                            Unsuffixed,
                                                                        ),
                                                                        span: src/main.rs:43:30: 43:32 (#0),
                                                                    },
                                                                ),
                                                                span: src/main.rs:43:30: 43:32 (#0),
                                                            },
                                                        ),
                                                        span: src/main.rs:43:12: 43:32 (#0),
                                                    },
                                                    Expr {
                                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).25),
                                                        kind: Binary(
                                                            Spanned {
                                                                node: Lt,
                                                                span: src/main.rs:43:53: 43:54 (#0),
                                                            },
                                                            Expr {
                                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).26),
                                                                kind: MethodCall(
                                                                    PathSegment {
                                                                        ident: test_while1#0,
                                                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).27),
                                                                        res: Err,
                                                                        args: None,
                                                                        infer_args: true,
                                                                    },
                                                                    Expr {
                                                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).28),
                                                                        kind: Path(
                                                                            Resolved(
                                                                                None,
                                                                                Path {
                                                                                    span: src/main.rs:43:36: 43:37 (#0),
                                                                                    res: Local(
                                                                                        HirId(DefId(0:41 ~ example_code[e214]::main).5),
                                                                                    ),
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: s#0,
                                                                                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).29),
                                                                                            res: Local(
                                                                                                HirId(DefId(0:41 ~ example_code[e214]::main).5),
                                                                                            ),
                                                                                            args: None,
                                                                                            infer_args: true,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                        span: src/main.rs:43:36: 43:37 (#0),
                                                                    },
                                                                    [
                                                                        Expr {
                                                                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).30),
                                                                            kind: Path(
                                                                                Resolved(
                                                                                    None,
                                                                                    Path {
                                                                                        span: src/main.rs:43:50: 43:51 (#0),
                                                                                        res: Local(
                                                                                            HirId(DefId(0:41 ~ example_code[e214]::main).14),
                                                                                        ),
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: a#0,
                                                                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).31),
                                                                                                res: Local(
                                                                                                    HirId(DefId(0:41 ~ example_code[e214]::main).14),
                                                                                                ),
                                                                                                args: None,
                                                                                                infer_args: true,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ),
                                                                            span: src/main.rs:43:50: 43:51 (#0),
                                                                        },
                                                                    ],
                                                                    src/main.rs:43:38: 43:52 (#0),
                                                                ),
                                                                span: src/main.rs:43:36: 43:52 (#0),
                                                            },
                                                            Expr {
                                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).32),
                                                                kind: Lit(
                                                                    Spanned {
                                                                        node: Int(
                                                                            Pu128(
                                                                                10,
                                                                            ),
                                                                            Unsuffixed,
                                                                        ),
                                                                        span: src/main.rs:43:55: 43:57 (#0),
                                                                    },
                                                                ),
                                                                span: src/main.rs:43:55: 43:57 (#0),
                                                            },
                                                        ),
                                                        span: src/main.rs:43:36: 43:57 (#0),
                                                    },
                                                ),
                                                span: src/main.rs:43:11: 43:58 (#0),
                                            },
                                        ),
                                        span: src/main.rs:43:11: 43:58 (#18),
                                    },
                                    Expr {
                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).40),
                                        kind: Block(
                                            Block {
                                                stmts: [
                                                    Stmt {
                                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).38),
                                                        kind: Semi(
                                                            Expr {
                                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).34),
                                                                kind: AssignOp(
                                                                    Spanned {
                                                                        node: Add,
                                                                        span: src/main.rs:44:11: 44:13 (#0),
                                                                    },
                                                                    Expr {
                                                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).35),
                                                                        kind: Path(
                                                                            Resolved(
                                                                                None,
                                                                                Path {
                                                                                    span: src/main.rs:44:9: 44:10 (#0),
                                                                                    res: Local(
                                                                                        HirId(DefId(0:41 ~ example_code[e214]::main).14),
                                                                                    ),
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: a#0,
                                                                                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).36),
                                                                                            res: Local(
                                                                                                HirId(DefId(0:41 ~ example_code[e214]::main).14),
                                                                                            ),
                                                                                            args: None,
                                                                                            infer_args: true,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                        span: src/main.rs:44:9: 44:10 (#0),
                                                                    },
                                                                    Expr {
                                                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).37),
                                                                        kind: Lit(
                                                                            Spanned {
                                                                                node: Int(
                                                                                    Pu128(
                                                                                        1,
                                                                                    ),
                                                                                    Unsuffixed,
                                                                                ),
                                                                                span: src/main.rs:44:14: 44:15 (#0),
                                                                            },
                                                                        ),
                                                                        span: src/main.rs:44:14: 44:15 (#0),
                                                                    },
                                                                ),
                                                                span: src/main.rs:44:9: 44:15 (#0),
                                                            },
                                                        ),
                                                        span: src/main.rs:44:9: 44:16 (#0),
                                                    },
                                                ],
                                                expr: None,
                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).39),
                                                rules: DefaultBlock,
                                                span: src/main.rs:43:59: 45:6 (#0),
                                                targeted_by_break: false,
                                            },
                                            None,
                                        ),
                                        span: src/main.rs:43:59: 45:6 (#0),
                                    },
                                    Some(
                                        Expr {
                                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).44),
                                            kind: Block(
                                                Block {
                                                    stmts: [
                                                        Stmt {
                                                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).42),
                                                            kind: Expr(
                                                                Expr {
                                                                    hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).41),
                                                                    kind: Break(
                                                                        Destination {
                                                                            label: None,
                                                                            target_id: Ok(
                                                                                HirId(DefId(0:41 ~ example_code[e214]::main).15),
                                                                            ),
                                                                        },
                                                                        None,
                                                                    ),
                                                                    span: src/main.rs:43:5: 45:6 (#17),
                                                                },
                                                            ),
                                                            span: src/main.rs:43:5: 45:6 (#17),
                                                        },
                                                    ],
                                                    expr: None,
                                                    hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).43),
                                                    rules: DefaultBlock,
                                                    span: src/main.rs:43:5: 45:6 (#17),
                                                    targeted_by_break: false,
                                                },
                                                None,
                                            ),
                                            span: src/main.rs:43:5: 45:6 (#17),
                                        },
                                    ),
                                ),
                                span: src/main.rs:43:5: 45:6 (#17),
                            },
                        ),
                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).46),
                        rules: DefaultBlock,
                        span: src/main.rs:43:5: 45:6 (#17),
                        targeted_by_break: false,
                    },
                    None,
                    While,
                    src/main.rs:43:5: 43:58 (#17),
                ),
                span: src/main.rs:43:5: 45:6 (#0),
            },
        ),
        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).47),
        rules: DefaultBlock,
        span: src/main.rs:4:11: 46:2 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "S {}",
)
Entering expr: Struct(
    Resolved(
        None,
        Path {
            span: src/main.rs:5:13: 5:14 (#0),
            res: Def(
                Struct,
                DefId(0:7 ~ example_code[e214]::a::fun_method::S),
            ),
            segments: [
                PathSegment {
                    ident: S#0,
                    hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).3),
                    res: Def(
                        Struct,
                        DefId(0:7 ~ example_code[e214]::a::fun_method::S),
                    ),
                    args: None,
                    infer_args: true,
                },
            ],
        },
    ),
    [],
    None,
)
The code is Ok(
    "R {}",
)
Entering expr: Struct(
    Resolved(
        None,
        Path {
            span: src/main.rs:6:13: 6:14 (#0),
            res: Def(
                Struct,
                DefId(0:26 ~ example_code[e214]::a::fun_method::R),
            ),
            segments: [
                PathSegment {
                    ident: R#0,
                    hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).8),
                    res: Def(
                        Struct,
                        DefId(0:26 ~ example_code[e214]::a::fun_method::R),
                    ),
                    args: None,
                    infer_args: true,
                },
            ],
        },
    ),
    [],
    None,
)
The code is Ok(
    "0",
)
Entering expr: Lit(
    Spanned {
        node: Int(
            Pu128(
                0,
            ),
            Unsuffixed,
        ),
        span: src/main.rs:33:17: 33:18 (#0),
    },
)
The code is Ok(
    "while (s.test_while(a) < 10 || s.test_while1(a) < 10) {\n        a += 1;\n    }",
)
Entering expr: Loop(
    Block {
        stmts: [],
        expr: Some(
            Expr {
                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).45),
                kind: If(
                    Expr {
                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).33),
                        kind: DropTemps(
                            Expr {
                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).16),
                                kind: Binary(
                                    Spanned {
                                        node: Or,
                                        span: src/main.rs:43:33: 43:35 (#0),
                                    },
                                    Expr {
                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).17),
                                        kind: Binary(
                                            Spanned {
                                                node: Lt,
                                                span: src/main.rs:43:28: 43:29 (#0),
                                            },
                                            Expr {
                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).18),
                                                kind: MethodCall(
                                                    PathSegment {
                                                        ident: test_while#0,
                                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).19),
                                                        res: Err,
                                                        args: None,
                                                        infer_args: true,
                                                    },
                                                    Expr {
                                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).20),
                                                        kind: Path(
                                                            Resolved(
                                                                None,
                                                                Path {
                                                                    span: src/main.rs:43:12: 43:13 (#0),
                                                                    res: Local(
                                                                        HirId(DefId(0:41 ~ example_code[e214]::main).5),
                                                                    ),
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: s#0,
                                                                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).21),
                                                                            res: Local(
                                                                                HirId(DefId(0:41 ~ example_code[e214]::main).5),
                                                                            ),
                                                                            args: None,
                                                                            infer_args: true,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        span: src/main.rs:43:12: 43:13 (#0),
                                                    },
                                                    [
                                                        Expr {
                                                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).22),
                                                            kind: Path(
                                                                Resolved(
                                                                    None,
                                                                    Path {
                                                                        span: src/main.rs:43:25: 43:26 (#0),
                                                                        res: Local(
                                                                            HirId(DefId(0:41 ~ example_code[e214]::main).14),
                                                                        ),
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: a#0,
                                                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).23),
                                                                                res: Local(
                                                                                    HirId(DefId(0:41 ~ example_code[e214]::main).14),
                                                                                ),
                                                                                args: None,
                                                                                infer_args: true,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ),
                                                            span: src/main.rs:43:25: 43:26 (#0),
                                                        },
                                                    ],
                                                    src/main.rs:43:14: 43:27 (#0),
                                                ),
                                                span: src/main.rs:43:12: 43:27 (#0),
                                            },
                                            Expr {
                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).24),
                                                kind: Lit(
                                                    Spanned {
                                                        node: Int(
                                                            Pu128(
                                                                10,
                                                            ),
                                                            Unsuffixed,
                                                        ),
                                                        span: src/main.rs:43:30: 43:32 (#0),
                                                    },
                                                ),
                                                span: src/main.rs:43:30: 43:32 (#0),
                                            },
                                        ),
                                        span: src/main.rs:43:12: 43:32 (#0),
                                    },
                                    Expr {
                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).25),
                                        kind: Binary(
                                            Spanned {
                                                node: Lt,
                                                span: src/main.rs:43:53: 43:54 (#0),
                                            },
                                            Expr {
                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).26),
                                                kind: MethodCall(
                                                    PathSegment {
                                                        ident: test_while1#0,
                                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).27),
                                                        res: Err,
                                                        args: None,
                                                        infer_args: true,
                                                    },
                                                    Expr {
                                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).28),
                                                        kind: Path(
                                                            Resolved(
                                                                None,
                                                                Path {
                                                                    span: src/main.rs:43:36: 43:37 (#0),
                                                                    res: Local(
                                                                        HirId(DefId(0:41 ~ example_code[e214]::main).5),
                                                                    ),
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: s#0,
                                                                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).29),
                                                                            res: Local(
                                                                                HirId(DefId(0:41 ~ example_code[e214]::main).5),
                                                                            ),
                                                                            args: None,
                                                                            infer_args: true,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        span: src/main.rs:43:36: 43:37 (#0),
                                                    },
                                                    [
                                                        Expr {
                                                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).30),
                                                            kind: Path(
                                                                Resolved(
                                                                    None,
                                                                    Path {
                                                                        span: src/main.rs:43:50: 43:51 (#0),
                                                                        res: Local(
                                                                            HirId(DefId(0:41 ~ example_code[e214]::main).14),
                                                                        ),
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: a#0,
                                                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).31),
                                                                                res: Local(
                                                                                    HirId(DefId(0:41 ~ example_code[e214]::main).14),
                                                                                ),
                                                                                args: None,
                                                                                infer_args: true,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ),
                                                            span: src/main.rs:43:50: 43:51 (#0),
                                                        },
                                                    ],
                                                    src/main.rs:43:38: 43:52 (#0),
                                                ),
                                                span: src/main.rs:43:36: 43:52 (#0),
                                            },
                                            Expr {
                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).32),
                                                kind: Lit(
                                                    Spanned {
                                                        node: Int(
                                                            Pu128(
                                                                10,
                                                            ),
                                                            Unsuffixed,
                                                        ),
                                                        span: src/main.rs:43:55: 43:57 (#0),
                                                    },
                                                ),
                                                span: src/main.rs:43:55: 43:57 (#0),
                                            },
                                        ),
                                        span: src/main.rs:43:36: 43:57 (#0),
                                    },
                                ),
                                span: src/main.rs:43:11: 43:58 (#0),
                            },
                        ),
                        span: src/main.rs:43:11: 43:58 (#18),
                    },
                    Expr {
                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).40),
                        kind: Block(
                            Block {
                                stmts: [
                                    Stmt {
                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).38),
                                        kind: Semi(
                                            Expr {
                                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).34),
                                                kind: AssignOp(
                                                    Spanned {
                                                        node: Add,
                                                        span: src/main.rs:44:11: 44:13 (#0),
                                                    },
                                                    Expr {
                                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).35),
                                                        kind: Path(
                                                            Resolved(
                                                                None,
                                                                Path {
                                                                    span: src/main.rs:44:9: 44:10 (#0),
                                                                    res: Local(
                                                                        HirId(DefId(0:41 ~ example_code[e214]::main).14),
                                                                    ),
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: a#0,
                                                                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).36),
                                                                            res: Local(
                                                                                HirId(DefId(0:41 ~ example_code[e214]::main).14),
                                                                            ),
                                                                            args: None,
                                                                            infer_args: true,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        span: src/main.rs:44:9: 44:10 (#0),
                                                    },
                                                    Expr {
                                                        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).37),
                                                        kind: Lit(
                                                            Spanned {
                                                                node: Int(
                                                                    Pu128(
                                                                        1,
                                                                    ),
                                                                    Unsuffixed,
                                                                ),
                                                                span: src/main.rs:44:14: 44:15 (#0),
                                                            },
                                                        ),
                                                        span: src/main.rs:44:14: 44:15 (#0),
                                                    },
                                                ),
                                                span: src/main.rs:44:9: 44:15 (#0),
                                            },
                                        ),
                                        span: src/main.rs:44:9: 44:16 (#0),
                                    },
                                ],
                                expr: None,
                                hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).39),
                                rules: DefaultBlock,
                                span: src/main.rs:43:59: 45:6 (#0),
                                targeted_by_break: false,
                            },
                            None,
                        ),
                        span: src/main.rs:43:59: 45:6 (#0),
                    },
                    Some(
                        Expr {
                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).44),
                            kind: Block(
                                Block {
                                    stmts: [
                                        Stmt {
                                            hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).42),
                                            kind: Expr(
                                                Expr {
                                                    hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).41),
                                                    kind: Break(
                                                        Destination {
                                                            label: None,
                                                            target_id: Ok(
                                                                HirId(DefId(0:41 ~ example_code[e214]::main).15),
                                                            ),
                                                        },
                                                        None,
                                                    ),
                                                    span: src/main.rs:43:5: 45:6 (#17),
                                                },
                                            ),
                                            span: src/main.rs:43:5: 45:6 (#17),
                                        },
                                    ],
                                    expr: None,
                                    hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).43),
                                    rules: DefaultBlock,
                                    span: src/main.rs:43:5: 45:6 (#17),
                                    targeted_by_break: false,
                                },
                                None,
                            ),
                            span: src/main.rs:43:5: 45:6 (#17),
                        },
                    ),
                ),
                span: src/main.rs:43:5: 45:6 (#17),
            },
        ),
        hir_id: HirId(DefId(0:41 ~ example_code[e214]::main).46),
        rules: DefaultBlock,
        span: src/main.rs:43:5: 45:6 (#17),
        targeted_by_break: false,
    },
    None,
    While,
    src/main.rs:43:5: 43:58 (#17),
)
The code is Ok(
    "{ let _g = 3; return true ; }",
)
Entering expr: Block(
    Block {
        stmts: [
            Stmt {
                hir_id: HirId(DefId(0:6 ~ example_code[e214]::a::fun_method::T::bla).3),
                kind: Let(
                    LetStmt {
                        pat: Pat {
                            hir_id: HirId(DefId(0:6 ~ example_code[e214]::a::fun_method::T::bla).6),
                            kind: Binding(
                                BindingMode(
                                    No,
                                    Not,
                                ),
                                HirId(DefId(0:6 ~ example_code[e214]::a::fun_method::T::bla).6),
                                _g#0,
                                None,
                            ),
                            span: src/a/fun_method.rs:4:33: 4:35 (#0),
                            default_binding_modes: true,
                        },
                        ty: None,
                        init: Some(
                            Expr {
                                hir_id: HirId(DefId(0:6 ~ example_code[e214]::a::fun_method::T::bla).4),
                                kind: Lit(
                                    Spanned {
                                        node: Int(
                                            Pu128(
                                                3,
                                            ),
                                            Unsuffixed,
                                        ),
                                        span: src/a/fun_method.rs:4:38: 4:39 (#0),
                                    },
                                ),
                                span: src/a/fun_method.rs:4:38: 4:39 (#0),
                            },
                        ),
                        els: None,
                        hir_id: HirId(DefId(0:6 ~ example_code[e214]::a::fun_method::T::bla).5),
                        span: src/a/fun_method.rs:4:29: 4:40 (#0),
                        source: Normal,
                    },
                ),
                span: src/a/fun_method.rs:4:29: 4:40 (#0),
            },
            Stmt {
                hir_id: HirId(DefId(0:6 ~ example_code[e214]::a::fun_method::T::bla).9),
                kind: Semi(
                    Expr {
                        hir_id: HirId(DefId(0:6 ~ example_code[e214]::a::fun_method::T::bla).7),
                        kind: Ret(
                            Some(
                                Expr {
                                    hir_id: HirId(DefId(0:6 ~ example_code[e214]::a::fun_method::T::bla).8),
                                    kind: Lit(
                                        Spanned {
                                            node: Bool(
                                                true,
                                            ),
                                            span: src/a/fun_method.rs:4:48: 4:52 (#0),
                                        },
                                    ),
                                    span: src/a/fun_method.rs:4:48: 4:52 (#0),
                                },
                            ),
                        ),
                        span: src/a/fun_method.rs:4:41: 4:52 (#0),
                    },
                ),
                span: src/a/fun_method.rs:4:41: 4:54 (#0),
            },
        ],
        expr: None,
        hir_id: HirId(DefId(0:6 ~ example_code[e214]::a::fun_method::T::bla).10),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:4:27: 4:56 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "3",
)
Entering expr: Lit(
    Spanned {
        node: Int(
            Pu128(
                3,
            ),
            Unsuffixed,
        ),
        span: src/a/fun_method.rs:4:38: 4:39 (#0),
    },
)
The code is Ok(
    "return true",
)
Entering expr: Ret(
    Some(
        Expr {
            hir_id: HirId(DefId(0:6 ~ example_code[e214]::a::fun_method::T::bla).8),
            kind: Lit(
                Spanned {
                    node: Bool(
                        true,
                    ),
                    span: src/a/fun_method.rs:4:48: 4:52 (#0),
                },
            ),
            span: src/a/fun_method.rs:4:48: 4:52 (#0),
        },
    ),
)
The code is Ok(
    "true",
)
Entering expr: Lit(
    Spanned {
        node: Bool(
            true,
        ),
        span: src/a/fun_method.rs:4:48: 4:52 (#0),
    },
)
The code is Ok(
    "{\n        if S1::should_call_bla(1) && S1::should_call_bla1(2) && S1::should_call_bla2(3) {\n            self.bla(); // 调用 bla\n        }\n        println!(\"met called\");\n    }",
)
Entering expr: Block(
    Block {
        stmts: [
            Stmt {
                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).32),
                kind: Expr(
                    Expr {
                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).3),
                        kind: If(
                            Expr {
                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).24),
                                kind: DropTemps(
                                    Expr {
                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).4),
                                        kind: Binary(
                                            Spanned {
                                                node: And,
                                                span: src/a/fun_method.rs:11:62: 11:64 (#0),
                                            },
                                            Expr {
                                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).5),
                                                kind: Binary(
                                                    Spanned {
                                                        node: And,
                                                        span: src/a/fun_method.rs:11:35: 11:37 (#0),
                                                    },
                                                    Expr {
                                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).6),
                                                        kind: Call(
                                                            Expr {
                                                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).7),
                                                                kind: Path(
                                                                    TypeRelative(
                                                                        Ty {
                                                                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).9),
                                                                            kind: Path(
                                                                                Resolved(
                                                                                    None,
                                                                                    Path {
                                                                                        span: src/a/fun_method.rs:11:12: 11:14 (#0),
                                                                                        res: Def(
                                                                                            Struct,
                                                                                            DefId(0:18 ~ example_code[e214]::a::fun_method::S1),
                                                                                        ),
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: S1#0,
                                                                                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).8),
                                                                                                res: Def(
                                                                                                    Struct,
                                                                                                    DefId(0:18 ~ example_code[e214]::a::fun_method::S1),
                                                                                                ),
                                                                                                args: None,
                                                                                                infer_args: true,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ),
                                                                            span: src/a/fun_method.rs:11:12: 11:14 (#0),
                                                                        },
                                                                        PathSegment {
                                                                            ident: should_call_bla#0,
                                                                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).10),
                                                                            res: Err,
                                                                            args: None,
                                                                            infer_args: true,
                                                                        },
                                                                    ),
                                                                ),
                                                                span: src/a/fun_method.rs:11:12: 11:31 (#0),
                                                            },
                                                            [
                                                                Expr {
                                                                    hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).11),
                                                                    kind: Lit(
                                                                        Spanned {
                                                                            node: Int(
                                                                                Pu128(
                                                                                    1,
                                                                                ),
                                                                                Unsuffixed,
                                                                            ),
                                                                            span: src/a/fun_method.rs:11:32: 11:33 (#0),
                                                                        },
                                                                    ),
                                                                    span: src/a/fun_method.rs:11:32: 11:33 (#0),
                                                                },
                                                            ],
                                                        ),
                                                        span: src/a/fun_method.rs:11:12: 11:34 (#0),
                                                    },
                                                    Expr {
                                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).12),
                                                        kind: Call(
                                                            Expr {
                                                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).13),
                                                                kind: Path(
                                                                    TypeRelative(
                                                                        Ty {
                                                                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).15),
                                                                            kind: Path(
                                                                                Resolved(
                                                                                    None,
                                                                                    Path {
                                                                                        span: src/a/fun_method.rs:11:38: 11:40 (#0),
                                                                                        res: Def(
                                                                                            Struct,
                                                                                            DefId(0:18 ~ example_code[e214]::a::fun_method::S1),
                                                                                        ),
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: S1#0,
                                                                                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).14),
                                                                                                res: Def(
                                                                                                    Struct,
                                                                                                    DefId(0:18 ~ example_code[e214]::a::fun_method::S1),
                                                                                                ),
                                                                                                args: None,
                                                                                                infer_args: true,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ),
                                                                            span: src/a/fun_method.rs:11:38: 11:40 (#0),
                                                                        },
                                                                        PathSegment {
                                                                            ident: should_call_bla1#0,
                                                                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).16),
                                                                            res: Err,
                                                                            args: None,
                                                                            infer_args: true,
                                                                        },
                                                                    ),
                                                                ),
                                                                span: src/a/fun_method.rs:11:38: 11:58 (#0),
                                                            },
                                                            [
                                                                Expr {
                                                                    hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).17),
                                                                    kind: Lit(
                                                                        Spanned {
                                                                            node: Int(
                                                                                Pu128(
                                                                                    2,
                                                                                ),
                                                                                Unsuffixed,
                                                                            ),
                                                                            span: src/a/fun_method.rs:11:59: 11:60 (#0),
                                                                        },
                                                                    ),
                                                                    span: src/a/fun_method.rs:11:59: 11:60 (#0),
                                                                },
                                                            ],
                                                        ),
                                                        span: src/a/fun_method.rs:11:38: 11:61 (#0),
                                                    },
                                                ),
                                                span: src/a/fun_method.rs:11:12: 11:61 (#0),
                                            },
                                            Expr {
                                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).18),
                                                kind: Call(
                                                    Expr {
                                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).19),
                                                        kind: Path(
                                                            TypeRelative(
                                                                Ty {
                                                                    hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).21),
                                                                    kind: Path(
                                                                        Resolved(
                                                                            None,
                                                                            Path {
                                                                                span: src/a/fun_method.rs:11:65: 11:67 (#0),
                                                                                res: Def(
                                                                                    Struct,
                                                                                    DefId(0:18 ~ example_code[e214]::a::fun_method::S1),
                                                                                ),
                                                                                segments: [
                                                                                    PathSegment {
                                                                                        ident: S1#0,
                                                                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).20),
                                                                                        res: Def(
                                                                                            Struct,
                                                                                            DefId(0:18 ~ example_code[e214]::a::fun_method::S1),
                                                                                        ),
                                                                                        args: None,
                                                                                        infer_args: true,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ),
                                                                    span: src/a/fun_method.rs:11:65: 11:67 (#0),
                                                                },
                                                                PathSegment {
                                                                    ident: should_call_bla2#0,
                                                                    hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).22),
                                                                    res: Err,
                                                                    args: None,
                                                                    infer_args: true,
                                                                },
                                                            ),
                                                        ),
                                                        span: src/a/fun_method.rs:11:65: 11:85 (#0),
                                                    },
                                                    [
                                                        Expr {
                                                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).23),
                                                            kind: Lit(
                                                                Spanned {
                                                                    node: Int(
                                                                        Pu128(
                                                                            3,
                                                                        ),
                                                                        Unsuffixed,
                                                                    ),
                                                                    span: src/a/fun_method.rs:11:86: 11:87 (#0),
                                                                },
                                                            ),
                                                            span: src/a/fun_method.rs:11:86: 11:87 (#0),
                                                        },
                                                    ],
                                                ),
                                                span: src/a/fun_method.rs:11:65: 11:88 (#0),
                                            },
                                        ),
                                        span: src/a/fun_method.rs:11:12: 11:88 (#0),
                                    },
                                ),
                                span: src/a/fun_method.rs:11:12: 11:88 (#12),
                            },
                            Expr {
                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).31),
                                kind: Block(
                                    Block {
                                        stmts: [
                                            Stmt {
                                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).29),
                                                kind: Semi(
                                                    Expr {
                                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).25),
                                                        kind: MethodCall(
                                                            PathSegment {
                                                                ident: bla#0,
                                                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).26),
                                                                res: Err,
                                                                args: None,
                                                                infer_args: true,
                                                            },
                                                            Expr {
                                                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).27),
                                                                kind: Path(
                                                                    Resolved(
                                                                        None,
                                                                        Path {
                                                                            span: src/a/fun_method.rs:12:13: 12:17 (#0),
                                                                            res: Local(
                                                                                HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).2),
                                                                            ),
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: self#0,
                                                                                    hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).28),
                                                                                    res: Local(
                                                                                        HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).2),
                                                                                    ),
                                                                                    args: None,
                                                                                    infer_args: true,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                                span: src/a/fun_method.rs:12:13: 12:17 (#0),
                                                            },
                                                            [],
                                                            src/a/fun_method.rs:12:18: 12:23 (#0),
                                                        ),
                                                        span: src/a/fun_method.rs:12:13: 12:23 (#0),
                                                    },
                                                ),
                                                span: src/a/fun_method.rs:12:13: 12:24 (#0),
                                            },
                                        ],
                                        expr: None,
                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).30),
                                        rules: DefaultBlock,
                                        span: src/a/fun_method.rs:11:89: 13:10 (#0),
                                        targeted_by_break: false,
                                    },
                                    None,
                                ),
                                span: src/a/fun_method.rs:11:89: 13:10 (#0),
                            },
                            None,
                        ),
                        span: src/a/fun_method.rs:11:9: 13:10 (#0),
                    },
                ),
                span: src/a/fun_method.rs:11:9: 13:10 (#0),
            },
            Stmt {
                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).49),
                kind: Semi(
                    Expr {
                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).33),
                        kind: Block(
                            Block {
                                stmts: [
                                    Stmt {
                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).47),
                                        kind: Semi(
                                            Expr {
                                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).34),
                                                kind: Call(
                                                    Expr {
                                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).35),
                                                        kind: Path(
                                                            Resolved(
                                                                None,
                                                                Path {
                                                                    span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:9: 143:27 (#4),
                                                                    res: Def(
                                                                        Fn,
                                                                        DefId(1:3520 ~ std[5b0f]::io::stdio::_print),
                                                                    ),
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: $crate#4,
                                                                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).36),
                                                                            res: Err,
                                                                            args: None,
                                                                            infer_args: true,
                                                                        },
                                                                        PathSegment {
                                                                            ident: io#4,
                                                                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).37),
                                                                            res: Def(
                                                                                Mod,
                                                                                DefId(1:2568 ~ std[5b0f]::io),
                                                                            ),
                                                                            args: None,
                                                                            infer_args: true,
                                                                        },
                                                                        PathSegment {
                                                                            ident: _print#4,
                                                                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).38),
                                                                            res: Def(
                                                                                Fn,
                                                                                DefId(1:3520 ~ std[5b0f]::io::stdio::_print),
                                                                            ),
                                                                            args: None,
                                                                            infer_args: true,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:9: 143:27 (#4),
                                                    },
                                                    [
                                                        Expr {
                                                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).39),
                                                            kind: Call(
                                                                Expr {
                                                                    hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).46),
                                                                    kind: Path(
                                                                        TypeRelative(
                                                                            Ty {
                                                                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).44),
                                                                                kind: Path(
                                                                                    Resolved(
                                                                                        None,
                                                                                        Path {
                                                                                            span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#5),
                                                                                            res: Def(
                                                                                                Struct,
                                                                                                DefId(2:46484 ~ core[f118]::fmt::Arguments),
                                                                                            ),
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: format_arguments#5,
                                                                                                    hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).43),
                                                                                                    res: Def(
                                                                                                        Struct,
                                                                                                        DefId(2:46484 ~ core[f118]::fmt::Arguments),
                                                                                                    ),
                                                                                                    args: None,
                                                                                                    infer_args: true,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ),
                                                                                span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#5),
                                                                            },
                                                                            PathSegment {
                                                                                ident: new_const#5,
                                                                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).45),
                                                                                res: Err,
                                                                                args: None,
                                                                                infer_args: true,
                                                                            },
                                                                        ),
                                                                    ),
                                                                    span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#5),
                                                                },
                                                                [
                                                                    Expr {
                                                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).42),
                                                                        kind: AddrOf(
                                                                            Ref,
                                                                            Not,
                                                                            Expr {
                                                                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).41),
                                                                                kind: Array(
                                                                                    [
                                                                                        Expr {
                                                                                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).40),
                                                                                            kind: Lit(
                                                                                                Spanned {
                                                                                                    node: Str(
                                                                                                        "met called\n",
                                                                                                        Cooked,
                                                                                                    ),
                                                                                                    span: src/a/fun_method.rs:14:18: 14:30 (#0),
                                                                                                },
                                                                                            ),
                                                                                            span: src/a/fun_method.rs:14:18: 14:30 (#0),
                                                                                        },
                                                                                    ],
                                                                                ),
                                                                                span: src/a/fun_method.rs:14:18: 14:30 (#0),
                                                                            },
                                                                        ),
                                                                        span: src/a/fun_method.rs:14:18: 14:30 (#0),
                                                                    },
                                                                ],
                                                            ),
                                                            span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#5),
                                                        },
                                                    ],
                                                ),
                                                span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:9: 143:62 (#4),
                                            },
                                        ),
                                        span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:9: 143:63 (#4),
                                    },
                                ],
                                expr: None,
                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).48),
                                rules: DefaultBlock,
                                span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:142:23: 144:6 (#4),
                                targeted_by_break: false,
                            },
                            None,
                        ),
                        span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:142:23: 144:6 (#4),
                    },
                ),
                span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:142:23: 144:6 (#4),
            },
        ],
        expr: None,
        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).50),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:10:23: 15:6 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "if S1::should_call_bla(1) && S1::should_call_bla1(2) && S1::should_call_bla2(3) {\n            self.bla(); // 调用 bla\n        }",
)
Entering expr: If(
    Expr {
        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).24),
        kind: DropTemps(
            Expr {
                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).4),
                kind: Binary(
                    Spanned {
                        node: And,
                        span: src/a/fun_method.rs:11:62: 11:64 (#0),
                    },
                    Expr {
                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).5),
                        kind: Binary(
                            Spanned {
                                node: And,
                                span: src/a/fun_method.rs:11:35: 11:37 (#0),
                            },
                            Expr {
                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).6),
                                kind: Call(
                                    Expr {
                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).7),
                                        kind: Path(
                                            TypeRelative(
                                                Ty {
                                                    hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).9),
                                                    kind: Path(
                                                        Resolved(
                                                            None,
                                                            Path {
                                                                span: src/a/fun_method.rs:11:12: 11:14 (#0),
                                                                res: Def(
                                                                    Struct,
                                                                    DefId(0:18 ~ example_code[e214]::a::fun_method::S1),
                                                                ),
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: S1#0,
                                                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).8),
                                                                        res: Def(
                                                                            Struct,
                                                                            DefId(0:18 ~ example_code[e214]::a::fun_method::S1),
                                                                        ),
                                                                        args: None,
                                                                        infer_args: true,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                    span: src/a/fun_method.rs:11:12: 11:14 (#0),
                                                },
                                                PathSegment {
                                                    ident: should_call_bla#0,
                                                    hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).10),
                                                    res: Err,
                                                    args: None,
                                                    infer_args: true,
                                                },
                                            ),
                                        ),
                                        span: src/a/fun_method.rs:11:12: 11:31 (#0),
                                    },
                                    [
                                        Expr {
                                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).11),
                                            kind: Lit(
                                                Spanned {
                                                    node: Int(
                                                        Pu128(
                                                            1,
                                                        ),
                                                        Unsuffixed,
                                                    ),
                                                    span: src/a/fun_method.rs:11:32: 11:33 (#0),
                                                },
                                            ),
                                            span: src/a/fun_method.rs:11:32: 11:33 (#0),
                                        },
                                    ],
                                ),
                                span: src/a/fun_method.rs:11:12: 11:34 (#0),
                            },
                            Expr {
                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).12),
                                kind: Call(
                                    Expr {
                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).13),
                                        kind: Path(
                                            TypeRelative(
                                                Ty {
                                                    hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).15),
                                                    kind: Path(
                                                        Resolved(
                                                            None,
                                                            Path {
                                                                span: src/a/fun_method.rs:11:38: 11:40 (#0),
                                                                res: Def(
                                                                    Struct,
                                                                    DefId(0:18 ~ example_code[e214]::a::fun_method::S1),
                                                                ),
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: S1#0,
                                                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).14),
                                                                        res: Def(
                                                                            Struct,
                                                                            DefId(0:18 ~ example_code[e214]::a::fun_method::S1),
                                                                        ),
                                                                        args: None,
                                                                        infer_args: true,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                    span: src/a/fun_method.rs:11:38: 11:40 (#0),
                                                },
                                                PathSegment {
                                                    ident: should_call_bla1#0,
                                                    hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).16),
                                                    res: Err,
                                                    args: None,
                                                    infer_args: true,
                                                },
                                            ),
                                        ),
                                        span: src/a/fun_method.rs:11:38: 11:58 (#0),
                                    },
                                    [
                                        Expr {
                                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).17),
                                            kind: Lit(
                                                Spanned {
                                                    node: Int(
                                                        Pu128(
                                                            2,
                                                        ),
                                                        Unsuffixed,
                                                    ),
                                                    span: src/a/fun_method.rs:11:59: 11:60 (#0),
                                                },
                                            ),
                                            span: src/a/fun_method.rs:11:59: 11:60 (#0),
                                        },
                                    ],
                                ),
                                span: src/a/fun_method.rs:11:38: 11:61 (#0),
                            },
                        ),
                        span: src/a/fun_method.rs:11:12: 11:61 (#0),
                    },
                    Expr {
                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).18),
                        kind: Call(
                            Expr {
                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).19),
                                kind: Path(
                                    TypeRelative(
                                        Ty {
                                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).21),
                                            kind: Path(
                                                Resolved(
                                                    None,
                                                    Path {
                                                        span: src/a/fun_method.rs:11:65: 11:67 (#0),
                                                        res: Def(
                                                            Struct,
                                                            DefId(0:18 ~ example_code[e214]::a::fun_method::S1),
                                                        ),
                                                        segments: [
                                                            PathSegment {
                                                                ident: S1#0,
                                                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).20),
                                                                res: Def(
                                                                    Struct,
                                                                    DefId(0:18 ~ example_code[e214]::a::fun_method::S1),
                                                                ),
                                                                args: None,
                                                                infer_args: true,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ),
                                            span: src/a/fun_method.rs:11:65: 11:67 (#0),
                                        },
                                        PathSegment {
                                            ident: should_call_bla2#0,
                                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).22),
                                            res: Err,
                                            args: None,
                                            infer_args: true,
                                        },
                                    ),
                                ),
                                span: src/a/fun_method.rs:11:65: 11:85 (#0),
                            },
                            [
                                Expr {
                                    hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).23),
                                    kind: Lit(
                                        Spanned {
                                            node: Int(
                                                Pu128(
                                                    3,
                                                ),
                                                Unsuffixed,
                                            ),
                                            span: src/a/fun_method.rs:11:86: 11:87 (#0),
                                        },
                                    ),
                                    span: src/a/fun_method.rs:11:86: 11:87 (#0),
                                },
                            ],
                        ),
                        span: src/a/fun_method.rs:11:65: 11:88 (#0),
                    },
                ),
                span: src/a/fun_method.rs:11:12: 11:88 (#0),
            },
        ),
        span: src/a/fun_method.rs:11:12: 11:88 (#12),
    },
    Expr {
        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).31),
        kind: Block(
            Block {
                stmts: [
                    Stmt {
                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).29),
                        kind: Semi(
                            Expr {
                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).25),
                                kind: MethodCall(
                                    PathSegment {
                                        ident: bla#0,
                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).26),
                                        res: Err,
                                        args: None,
                                        infer_args: true,
                                    },
                                    Expr {
                                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).27),
                                        kind: Path(
                                            Resolved(
                                                None,
                                                Path {
                                                    span: src/a/fun_method.rs:12:13: 12:17 (#0),
                                                    res: Local(
                                                        HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).2),
                                                    ),
                                                    segments: [
                                                        PathSegment {
                                                            ident: self#0,
                                                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).28),
                                                            res: Local(
                                                                HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).2),
                                                            ),
                                                            args: None,
                                                            infer_args: true,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ),
                                        span: src/a/fun_method.rs:12:13: 12:17 (#0),
                                    },
                                    [],
                                    src/a/fun_method.rs:12:18: 12:23 (#0),
                                ),
                                span: src/a/fun_method.rs:12:13: 12:23 (#0),
                            },
                        ),
                        span: src/a/fun_method.rs:12:13: 12:24 (#0),
                    },
                ],
                expr: None,
                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).30),
                rules: DefaultBlock,
                span: src/a/fun_method.rs:11:89: 13:10 (#0),
                targeted_by_break: false,
            },
            None,
        ),
        span: src/a/fun_method.rs:11:89: 13:10 (#0),
    },
    None,
)
The code is Ok(
    "{\n            self.bla(); // 调用 bla\n        }",
)
Entering expr: Block(
    Block {
        stmts: [
            Stmt {
                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).29),
                kind: Semi(
                    Expr {
                        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).25),
                        kind: MethodCall(
                            PathSegment {
                                ident: bla#0,
                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).26),
                                res: Err,
                                args: None,
                                infer_args: true,
                            },
                            Expr {
                                hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).27),
                                kind: Path(
                                    Resolved(
                                        None,
                                        Path {
                                            span: src/a/fun_method.rs:12:13: 12:17 (#0),
                                            res: Local(
                                                HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).2),
                                            ),
                                            segments: [
                                                PathSegment {
                                                    ident: self#0,
                                                    hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).28),
                                                    res: Local(
                                                        HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).2),
                                                    ),
                                                    args: None,
                                                    infer_args: true,
                                                },
                                            ],
                                        },
                                    ),
                                ),
                                span: src/a/fun_method.rs:12:13: 12:17 (#0),
                            },
                            [],
                            src/a/fun_method.rs:12:18: 12:23 (#0),
                        ),
                        span: src/a/fun_method.rs:12:13: 12:23 (#0),
                    },
                ),
                span: src/a/fun_method.rs:12:13: 12:24 (#0),
            },
        ],
        expr: None,
        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).30),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:11:89: 13:10 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "self.bla()",
)
Entering expr: MethodCall(
    PathSegment {
        ident: bla#0,
        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).26),
        res: Err,
        args: None,
        infer_args: true,
    },
    Expr {
        hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).27),
        kind: Path(
            Resolved(
                None,
                Path {
                    span: src/a/fun_method.rs:12:13: 12:17 (#0),
                    res: Local(
                        HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).2),
                    ),
                    segments: [
                        PathSegment {
                            ident: self#0,
                            hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).28),
                            res: Local(
                                HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).2),
                            ),
                            args: None,
                            infer_args: true,
                        },
                    ],
                },
            ),
        ),
        span: src/a/fun_method.rs:12:13: 12:17 (#0),
    },
    [],
    src/a/fun_method.rs:12:18: 12:23 (#0),
)
new static call: Call {
    call_expr: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).25),
    call_expr_span: src/a/fun_method.rs:12:13: 12:23 (#0),
    caller: Some(
        DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met),
    ),
    caller_span: None,
    callee: DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla),
    callee_span: src/a/fun_method.rs:24:5: 29:6 (#0),
    callee_path: "a::fun_method::S::bla",
    constraint_depth: 1,
}
The code is Ok(
    "self",
)
Entering expr: Path(
    Resolved(
        None,
        Path {
            span: src/a/fun_method.rs:12:13: 12:17 (#0),
            res: Local(
                HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).2),
            ),
            segments: [
                PathSegment {
                    ident: self#0,
                    hir_id: HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).28),
                    res: Local(
                        HirId(DefId(0:10 ~ example_code[e214]::a::fun_method::{impl#0}::met).2),
                    ),
                    args: None,
                    infer_args: true,
                },
            ],
        },
    ),
)
The code is Ok(
    "{\n        for _ in 0..1 {\n            println!(\"bla called\");\n        }\n        return true;\n    }",
)
Entering expr: Block(
    Block {
        stmts: [
            Stmt {
                hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).49),
                kind: Expr(
                    Expr {
                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).48),
                        kind: DropTemps(
                            Expr {
                                hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).47),
                                kind: Match(
                                    Expr {
                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).46),
                                        kind: Call(
                                            Expr {
                                                hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).45),
                                                kind: Path(
                                                    LangItem(
                                                        IntoIterIntoIter,
                                                        src/a/fun_method.rs:25:18: 25:22 (#14),
                                                    ),
                                                ),
                                                span: src/a/fun_method.rs:25:18: 25:22 (#14),
                                            },
                                            [
                                                Expr {
                                                    hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).3),
                                                    kind: Struct(
                                                        LangItem(
                                                            Range,
                                                            src/a/fun_method.rs:25:18: 25:22 (#0),
                                                        ),
                                                        [
                                                            ExprField {
                                                                hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).5),
                                                                ident: start#0,
                                                                expr: Expr {
                                                                    hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).4),
                                                                    kind: Lit(
                                                                        Spanned {
                                                                            node: Int(
                                                                                Pu128(
                                                                                    0,
                                                                                ),
                                                                                Unsuffixed,
                                                                            ),
                                                                            span: src/a/fun_method.rs:25:18: 25:19 (#0),
                                                                        },
                                                                    ),
                                                                    span: src/a/fun_method.rs:25:18: 25:19 (#0),
                                                                },
                                                                span: src/a/fun_method.rs:25:18: 25:19 (#0),
                                                                is_shorthand: false,
                                                            },
                                                            ExprField {
                                                                hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).7),
                                                                ident: end#0,
                                                                expr: Expr {
                                                                    hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).6),
                                                                    kind: Lit(
                                                                        Spanned {
                                                                            node: Int(
                                                                                Pu128(
                                                                                    1,
                                                                                ),
                                                                                Unsuffixed,
                                                                            ),
                                                                            span: src/a/fun_method.rs:25:21: 25:22 (#0),
                                                                        },
                                                                    ),
                                                                    span: src/a/fun_method.rs:25:21: 25:22 (#0),
                                                                },
                                                                span: src/a/fun_method.rs:25:21: 25:22 (#0),
                                                                is_shorthand: false,
                                                            },
                                                        ],
                                                        None,
                                                    ),
                                                    span: src/a/fun_method.rs:25:18: 25:22 (#0),
                                                },
                                            ],
                                        ),
                                        span: src/a/fun_method.rs:25:18: 25:22 (#14),
                                    },
                                    [
                                        Arm {
                                            hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).44),
                                            span: src/a/fun_method.rs:25:9: 27:10 (#13),
                                            pat: Pat {
                                                hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).35),
                                                kind: Binding(
                                                    BindingMode(
                                                        No,
                                                        Mut,
                                                    ),
                                                    HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).35),
                                                    iter#0,
                                                    None,
                                                ),
                                                span: src/a/fun_method.rs:25:18: 25:22 (#14),
                                                default_binding_modes: true,
                                            },
                                            guard: None,
                                            body: Expr {
                                                hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).9),
                                                kind: Loop(
                                                    Block {
                                                        stmts: [
                                                            Stmt {
                                                                hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).42),
                                                                kind: Expr(
                                                                    Expr {
                                                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).41),
                                                                        kind: Match(
                                                                            Expr {
                                                                                hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).40),
                                                                                kind: Call(
                                                                                    Expr {
                                                                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).39),
                                                                                        kind: Path(
                                                                                            LangItem(
                                                                                                IteratorNext,
                                                                                                src/a/fun_method.rs:25:18: 25:22 (#14),
                                                                                            ),
                                                                                        ),
                                                                                        span: src/a/fun_method.rs:25:18: 25:22 (#14),
                                                                                    },
                                                                                    [
                                                                                        Expr {
                                                                                            hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).38),
                                                                                            kind: AddrOf(
                                                                                                Ref,
                                                                                                Mut,
                                                                                                Expr {
                                                                                                    hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).37),
                                                                                                    kind: Path(
                                                                                                        Resolved(
                                                                                                            None,
                                                                                                            Path {
                                                                                                                span: src/a/fun_method.rs:25:18: 25:22 (#14),
                                                                                                                res: Local(
                                                                                                                    HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).35),
                                                                                                                ),
                                                                                                                segments: [
                                                                                                                    PathSegment {
                                                                                                                        ident: iter#0,
                                                                                                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).36),
                                                                                                                        res: Local(
                                                                                                                            HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).35),
                                                                                                                        ),
                                                                                                                        args: None,
                                                                                                                        infer_args: true,
                                                                                                                    },
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                    ),
                                                                                                    span: src/a/fun_method.rs:25:18: 25:22 (#14),
                                                                                                },
                                                                                            ),
                                                                                            span: src/a/fun_method.rs:25:18: 25:22 (#14),
                                                                                        },
                                                                                    ],
                                                                                ),
                                                                                span: src/a/fun_method.rs:25:18: 25:22 (#14),
                                                                            },
                                                                            [
                                                                                Arm {
                                                                                    hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).12),
                                                                                    span: src/a/fun_method.rs:25:9: 27:10 (#13),
                                                                                    pat: Pat {
                                                                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).11),
                                                                                        kind: Struct(
                                                                                            LangItem(
                                                                                                OptionNone,
                                                                                                src/a/fun_method.rs:25:9: 27:10 (#13),
                                                                                            ),
                                                                                            [],
                                                                                            false,
                                                                                        ),
                                                                                        span: src/a/fun_method.rs:25:9: 27:10 (#13),
                                                                                        default_binding_modes: true,
                                                                                    },
                                                                                    guard: None,
                                                                                    body: Expr {
                                                                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).10),
                                                                                        kind: Break(
                                                                                            Destination {
                                                                                                label: None,
                                                                                                target_id: Ok(
                                                                                                    HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).9),
                                                                                                ),
                                                                                            },
                                                                                            None,
                                                                                        ),
                                                                                        span: src/a/fun_method.rs:25:9: 27:10 (#13),
                                                                                    },
                                                                                },
                                                                                Arm {
                                                                                    hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).34),
                                                                                    span: src/a/fun_method.rs:25:23: 27:10 (#0),
                                                                                    pat: Pat {
                                                                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).14),
                                                                                        kind: Struct(
                                                                                            LangItem(
                                                                                                OptionSome,
                                                                                                src/a/fun_method.rs:25:13: 25:14 (#15),
                                                                                            ),
                                                                                            [
                                                                                                PatField {
                                                                                                    hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).13),
                                                                                                    ident: 0#15,
                                                                                                    pat: Pat {
                                                                                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).8),
                                                                                                        kind: Wild,
                                                                                                        span: src/a/fun_method.rs:25:13: 25:14 (#0),
                                                                                                        default_binding_modes: true,
                                                                                                    },
                                                                                                    is_shorthand: false,
                                                                                                    span: src/a/fun_method.rs:25:13: 25:14 (#15),
                                                                                                },
                                                                                            ],
                                                                                            false,
                                                                                        ),
                                                                                        span: src/a/fun_method.rs:25:13: 25:14 (#15),
                                                                                        default_binding_modes: true,
                                                                                    },
                                                                                    guard: None,
                                                                                    body: Expr {
                                                                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).33),
                                                                                        kind: Block(
                                                                                            Block {
                                                                                                stmts: [
                                                                                                    Stmt {
                                                                                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).31),
                                                                                                        kind: Semi(
                                                                                                            Expr {
                                                                                                                hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).15),
                                                                                                                kind: Block(
                                                                                                                    Block {
                                                                                                                        stmts: [
                                                                                                                            Stmt {
                                                                                                                                hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).29),
                                                                                                                                kind: Semi(
                                                                                                                                    Expr {
                                                                                                                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).16),
                                                                                                                                        kind: Call(
                                                                                                                                            Expr {
                                                                                                                                                hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).17),
                                                                                                                                                kind: Path(
                                                                                                                                                    Resolved(
                                                                                                                                                        None,
                                                                                                                                                        Path {
                                                                                                                                                            span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:9: 143:27 (#6),
                                                                                                                                                            res: Def(
                                                                                                                                                                Fn,
                                                                                                                                                                DefId(1:3520 ~ std[5b0f]::io::stdio::_print),
                                                                                                                                                            ),
                                                                                                                                                            segments: [
                                                                                                                                                                PathSegment {
                                                                                                                                                                    ident: $crate#6,
                                                                                                                                                                    hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).18),
                                                                                                                                                                    res: Err,
                                                                                                                                                                    args: None,
                                                                                                                                                                    infer_args: true,
                                                                                                                                                                },
                                                                                                                                                                PathSegment {
                                                                                                                                                                    ident: io#6,
                                                                                                                                                                    hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).19),
                                                                                                                                                                    res: Def(
                                                                                                                                                                        Mod,
                                                                                                                                                                        DefId(1:2568 ~ std[5b0f]::io),
                                                                                                                                                                    ),
                                                                                                                                                                    args: None,
                                                                                                                                                                    infer_args: true,
                                                                                                                                                                },
                                                                                                                                                                PathSegment {
                                                                                                                                                                    ident: _print#6,
                                                                                                                                                                    hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).20),
                                                                                                                                                                    res: Def(
                                                                                                                                                                        Fn,
                                                                                                                                                                        DefId(1:3520 ~ std[5b0f]::io::stdio::_print),
                                                                                                                                                                    ),
                                                                                                                                                                    args: None,
                                                                                                                                                                    infer_args: true,
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ),
                                                                                                                                                ),
                                                                                                                                                span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:9: 143:27 (#6),
                                                                                                                                            },
                                                                                                                                            [
                                                                                                                                                Expr {
                                                                                                                                                    hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).21),
                                                                                                                                                    kind: Call(
                                                                                                                                                        Expr {
                                                                                                                                                            hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).28),
                                                                                                                                                            kind: Path(
                                                                                                                                                                TypeRelative(
                                                                                                                                                                    Ty {
                                                                                                                                                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).26),
                                                                                                                                                                        kind: Path(
                                                                                                                                                                            Resolved(
                                                                                                                                                                                None,
                                                                                                                                                                                Path {
                                                                                                                                                                                    span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#7),
                                                                                                                                                                                    res: Def(
                                                                                                                                                                                        Struct,
                                                                                                                                                                                        DefId(2:46484 ~ core[f118]::fmt::Arguments),
                                                                                                                                                                                    ),
                                                                                                                                                                                    segments: [
                                                                                                                                                                                        PathSegment {
                                                                                                                                                                                            ident: format_arguments#7,
                                                                                                                                                                                            hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).25),
                                                                                                                                                                                            res: Def(
                                                                                                                                                                                                Struct,
                                                                                                                                                                                                DefId(2:46484 ~ core[f118]::fmt::Arguments),
                                                                                                                                                                                            ),
                                                                                                                                                                                            args: None,
                                                                                                                                                                                            infer_args: true,
                                                                                                                                                                                        },
                                                                                                                                                                                    ],
                                                                                                                                                                                },
                                                                                                                                                                            ),
                                                                                                                                                                        ),
                                                                                                                                                                        span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#7),
                                                                                                                                                                    },
                                                                                                                                                                    PathSegment {
                                                                                                                                                                        ident: new_const#7,
                                                                                                                                                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).27),
                                                                                                                                                                        res: Err,
                                                                                                                                                                        args: None,
                                                                                                                                                                        infer_args: true,
                                                                                                                                                                    },
                                                                                                                                                                ),
                                                                                                                                                            ),
                                                                                                                                                            span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#7),
                                                                                                                                                        },
                                                                                                                                                        [
                                                                                                                                                            Expr {
                                                                                                                                                                hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).24),
                                                                                                                                                                kind: AddrOf(
                                                                                                                                                                    Ref,
                                                                                                                                                                    Not,
                                                                                                                                                                    Expr {
                                                                                                                                                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).23),
                                                                                                                                                                        kind: Array(
                                                                                                                                                                            [
                                                                                                                                                                                Expr {
                                                                                                                                                                                    hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).22),
                                                                                                                                                                                    kind: Lit(
                                                                                                                                                                                        Spanned {
                                                                                                                                                                                            node: Str(
                                                                                                                                                                                                "bla called\n",
                                                                                                                                                                                                Cooked,
                                                                                                                                                                                            ),
                                                                                                                                                                                            span: src/a/fun_method.rs:26:22: 26:34 (#0),
                                                                                                                                                                                        },
                                                                                                                                                                                    ),
                                                                                                                                                                                    span: src/a/fun_method.rs:26:22: 26:34 (#0),
                                                                                                                                                                                },
                                                                                                                                                                            ],
                                                                                                                                                                        ),
                                                                                                                                                                        span: src/a/fun_method.rs:26:22: 26:34 (#0),
                                                                                                                                                                    },
                                                                                                                                                                ),
                                                                                                                                                                span: src/a/fun_method.rs:26:22: 26:34 (#0),
                                                                                                                                                            },
                                                                                                                                                        ],
                                                                                                                                                    ),
                                                                                                                                                    span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#7),
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        ),
                                                                                                                                        span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:9: 143:62 (#6),
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                                span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:9: 143:63 (#6),
                                                                                                                            },
                                                                                                                        ],
                                                                                                                        expr: None,
                                                                                                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).30),
                                                                                                                        rules: DefaultBlock,
                                                                                                                        span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:142:23: 144:6 (#6),
                                                                                                                        targeted_by_break: false,
                                                                                                                    },
                                                                                                                    None,
                                                                                                                ),
                                                                                                                span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:142:23: 144:6 (#6),
                                                                                                            },
                                                                                                        ),
                                                                                                        span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:142:23: 144:6 (#6),
                                                                                                    },
                                                                                                ],
                                                                                                expr: None,
                                                                                                hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).32),
                                                                                                rules: DefaultBlock,
                                                                                                span: src/a/fun_method.rs:25:23: 27:10 (#0),
                                                                                                targeted_by_break: false,
                                                                                            },
                                                                                            None,
                                                                                        ),
                                                                                        span: src/a/fun_method.rs:25:23: 27:10 (#0),
                                                                                    },
                                                                                },
                                                                            ],
                                                                            ForLoopDesugar,
                                                                        ),
                                                                        span: src/a/fun_method.rs:25:18: 25:22 (#14),
                                                                    },
                                                                ),
                                                                span: src/a/fun_method.rs:25:9: 27:10 (#13),
                                                            },
                                                        ],
                                                        expr: None,
                                                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).43),
                                                        rules: DefaultBlock,
                                                        span: src/a/fun_method.rs:25:9: 27:10 (#13),
                                                        targeted_by_break: false,
                                                    },
                                                    None,
                                                    ForLoop,
                                                    src/a/fun_method.rs:25:9: 25:22 (#13),
                                                ),
                                                span: src/a/fun_method.rs:25:9: 27:10 (#13),
                                            },
                                        },
                                    ],
                                    ForLoopDesugar,
                                ),
                                span: src/a/fun_method.rs:25:9: 27:10 (#13),
                            },
                        ),
                        span: src/a/fun_method.rs:25:9: 27:10 (#13),
                    },
                ),
                span: src/a/fun_method.rs:25:9: 27:10 (#0),
            },
            Stmt {
                hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).52),
                kind: Semi(
                    Expr {
                        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).50),
                        kind: Ret(
                            Some(
                                Expr {
                                    hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).51),
                                    kind: Lit(
                                        Spanned {
                                            node: Bool(
                                                true,
                                            ),
                                            span: src/a/fun_method.rs:28:16: 28:20 (#0),
                                        },
                                    ),
                                    span: src/a/fun_method.rs:28:16: 28:20 (#0),
                                },
                            ),
                        ),
                        span: src/a/fun_method.rs:28:9: 28:20 (#0),
                    },
                ),
                span: src/a/fun_method.rs:28:9: 28:21 (#0),
            },
        ],
        expr: None,
        hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).53),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:24:31: 29:6 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "return true",
)
Entering expr: Ret(
    Some(
        Expr {
            hir_id: HirId(DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla).51),
            kind: Lit(
                Spanned {
                    node: Bool(
                        true,
                    ),
                    span: src/a/fun_method.rs:28:16: 28:20 (#0),
                },
            ),
            span: src/a/fun_method.rs:28:16: 28:20 (#0),
        },
    ),
)
The code is Ok(
    "true",
)
Entering expr: Lit(
    Spanned {
        node: Bool(
            true,
        ),
        span: src/a/fun_method.rs:28:16: 28:20 (#0),
    },
)
The code is Ok(
    "{\n        self.bla();\n        return a + 1;\n    }",
)
Entering expr: Block(
    Block {
        stmts: [
            Stmt {
                hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).9),
                kind: Semi(
                    Expr {
                        hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).5),
                        kind: MethodCall(
                            PathSegment {
                                ident: bla#0,
                                hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).6),
                                res: Err,
                                args: None,
                                infer_args: true,
                            },
                            Expr {
                                hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).7),
                                kind: Path(
                                    Resolved(
                                        None,
                                        Path {
                                            span: src/a/fun_method.rs:32:9: 32:13 (#0),
                                            res: Local(
                                                HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).2),
                                            ),
                                            segments: [
                                                PathSegment {
                                                    ident: self#0,
                                                    hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).8),
                                                    res: Local(
                                                        HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).2),
                                                    ),
                                                    args: None,
                                                    infer_args: true,
                                                },
                                            ],
                                        },
                                    ),
                                ),
                                span: src/a/fun_method.rs:32:9: 32:13 (#0),
                            },
                            [],
                            src/a/fun_method.rs:32:14: 32:19 (#0),
                        ),
                        span: src/a/fun_method.rs:32:9: 32:19 (#0),
                    },
                ),
                span: src/a/fun_method.rs:32:9: 32:20 (#0),
            },
            Stmt {
                hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).15),
                kind: Semi(
                    Expr {
                        hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).10),
                        kind: Ret(
                            Some(
                                Expr {
                                    hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).11),
                                    kind: Binary(
                                        Spanned {
                                            node: Add,
                                            span: src/a/fun_method.rs:33:18: 33:19 (#0),
                                        },
                                        Expr {
                                            hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).12),
                                            kind: Path(
                                                Resolved(
                                                    None,
                                                    Path {
                                                        span: src/a/fun_method.rs:33:16: 33:17 (#0),
                                                        res: Local(
                                                            HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).4),
                                                        ),
                                                        segments: [
                                                            PathSegment {
                                                                ident: a#0,
                                                                hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).13),
                                                                res: Local(
                                                                    HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).4),
                                                                ),
                                                                args: None,
                                                                infer_args: true,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ),
                                            span: src/a/fun_method.rs:33:16: 33:17 (#0),
                                        },
                                        Expr {
                                            hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).14),
                                            kind: Lit(
                                                Spanned {
                                                    node: Int(
                                                        Pu128(
                                                            1,
                                                        ),
                                                        Unsuffixed,
                                                    ),
                                                    span: src/a/fun_method.rs:33:20: 33:21 (#0),
                                                },
                                            ),
                                            span: src/a/fun_method.rs:33:20: 33:21 (#0),
                                        },
                                    ),
                                    span: src/a/fun_method.rs:33:16: 33:21 (#0),
                                },
                            ),
                        ),
                        span: src/a/fun_method.rs:33:9: 33:21 (#0),
                    },
                ),
                span: src/a/fun_method.rs:33:9: 33:22 (#0),
            },
        ],
        expr: None,
        hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).16),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:31:45: 34:6 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "self.bla()",
)
Entering expr: MethodCall(
    PathSegment {
        ident: bla#0,
        hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).6),
        res: Err,
        args: None,
        infer_args: true,
    },
    Expr {
        hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).7),
        kind: Path(
            Resolved(
                None,
                Path {
                    span: src/a/fun_method.rs:32:9: 32:13 (#0),
                    res: Local(
                        HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).2),
                    ),
                    segments: [
                        PathSegment {
                            ident: self#0,
                            hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).8),
                            res: Local(
                                HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).2),
                            ),
                            args: None,
                            infer_args: true,
                        },
                    ],
                },
            ),
        ),
        span: src/a/fun_method.rs:32:9: 32:13 (#0),
    },
    [],
    src/a/fun_method.rs:32:14: 32:19 (#0),
)
new static call: Call {
    call_expr: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).5),
    call_expr_span: src/a/fun_method.rs:32:9: 32:19 (#0),
    caller: Some(
        DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while),
    ),
    caller_span: None,
    callee: DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla),
    callee_span: src/a/fun_method.rs:24:5: 29:6 (#0),
    callee_path: "a::fun_method::S::bla",
    constraint_depth: 0,
}
The code is Ok(
    "self",
)
Entering expr: Path(
    Resolved(
        None,
        Path {
            span: src/a/fun_method.rs:32:9: 32:13 (#0),
            res: Local(
                HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).2),
            ),
            segments: [
                PathSegment {
                    ident: self#0,
                    hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).8),
                    res: Local(
                        HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).2),
                    ),
                    args: None,
                    infer_args: true,
                },
            ],
        },
    ),
)
The code is Ok(
    "return a + 1",
)
Entering expr: Ret(
    Some(
        Expr {
            hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).11),
            kind: Binary(
                Spanned {
                    node: Add,
                    span: src/a/fun_method.rs:33:18: 33:19 (#0),
                },
                Expr {
                    hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).12),
                    kind: Path(
                        Resolved(
                            None,
                            Path {
                                span: src/a/fun_method.rs:33:16: 33:17 (#0),
                                res: Local(
                                    HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).4),
                                ),
                                segments: [
                                    PathSegment {
                                        ident: a#0,
                                        hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).13),
                                        res: Local(
                                            HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).4),
                                        ),
                                        args: None,
                                        infer_args: true,
                                    },
                                ],
                            },
                        ),
                    ),
                    span: src/a/fun_method.rs:33:16: 33:17 (#0),
                },
                Expr {
                    hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).14),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    1,
                                ),
                                Unsuffixed,
                            ),
                            span: src/a/fun_method.rs:33:20: 33:21 (#0),
                        },
                    ),
                    span: src/a/fun_method.rs:33:20: 33:21 (#0),
                },
            ),
            span: src/a/fun_method.rs:33:16: 33:21 (#0),
        },
    ),
)
The code is Ok(
    "a + 1",
)
Entering expr: Binary(
    Spanned {
        node: Add,
        span: src/a/fun_method.rs:33:18: 33:19 (#0),
    },
    Expr {
        hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).12),
        kind: Path(
            Resolved(
                None,
                Path {
                    span: src/a/fun_method.rs:33:16: 33:17 (#0),
                    res: Local(
                        HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).4),
                    ),
                    segments: [
                        PathSegment {
                            ident: a#0,
                            hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).13),
                            res: Local(
                                HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).4),
                            ),
                            args: None,
                            infer_args: true,
                        },
                    ],
                },
            ),
        ),
        span: src/a/fun_method.rs:33:16: 33:17 (#0),
    },
    Expr {
        hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).14),
        kind: Lit(
            Spanned {
                node: Int(
                    Pu128(
                        1,
                    ),
                    Unsuffixed,
                ),
                span: src/a/fun_method.rs:33:20: 33:21 (#0),
            },
        ),
        span: src/a/fun_method.rs:33:20: 33:21 (#0),
    },
)
The code is Ok(
    "a",
)
Entering expr: Path(
    Resolved(
        None,
        Path {
            span: src/a/fun_method.rs:33:16: 33:17 (#0),
            res: Local(
                HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).4),
            ),
            segments: [
                PathSegment {
                    ident: a#0,
                    hir_id: HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).13),
                    res: Local(
                        HirId(DefId(0:12 ~ example_code[e214]::a::fun_method::{impl#0}::test_while).4),
                    ),
                    args: None,
                    infer_args: true,
                },
            ],
        },
    ),
)
The code is Ok(
    "1",
)
Entering expr: Lit(
    Spanned {
        node: Int(
            Pu128(
                1,
            ),
            Unsuffixed,
        ),
        span: src/a/fun_method.rs:33:20: 33:21 (#0),
    },
)
The code is Ok(
    "{\n        self.bla();\n        return a + 2;\n    }",
)
Entering expr: Block(
    Block {
        stmts: [
            Stmt {
                hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).9),
                kind: Semi(
                    Expr {
                        hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).5),
                        kind: MethodCall(
                            PathSegment {
                                ident: bla#0,
                                hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).6),
                                res: Err,
                                args: None,
                                infer_args: true,
                            },
                            Expr {
                                hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).7),
                                kind: Path(
                                    Resolved(
                                        None,
                                        Path {
                                            span: src/a/fun_method.rs:37:9: 37:13 (#0),
                                            res: Local(
                                                HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).2),
                                            ),
                                            segments: [
                                                PathSegment {
                                                    ident: self#0,
                                                    hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).8),
                                                    res: Local(
                                                        HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).2),
                                                    ),
                                                    args: None,
                                                    infer_args: true,
                                                },
                                            ],
                                        },
                                    ),
                                ),
                                span: src/a/fun_method.rs:37:9: 37:13 (#0),
                            },
                            [],
                            src/a/fun_method.rs:37:14: 37:19 (#0),
                        ),
                        span: src/a/fun_method.rs:37:9: 37:19 (#0),
                    },
                ),
                span: src/a/fun_method.rs:37:9: 37:20 (#0),
            },
            Stmt {
                hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).15),
                kind: Semi(
                    Expr {
                        hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).10),
                        kind: Ret(
                            Some(
                                Expr {
                                    hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).11),
                                    kind: Binary(
                                        Spanned {
                                            node: Add,
                                            span: src/a/fun_method.rs:38:18: 38:19 (#0),
                                        },
                                        Expr {
                                            hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).12),
                                            kind: Path(
                                                Resolved(
                                                    None,
                                                    Path {
                                                        span: src/a/fun_method.rs:38:16: 38:17 (#0),
                                                        res: Local(
                                                            HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).4),
                                                        ),
                                                        segments: [
                                                            PathSegment {
                                                                ident: a#0,
                                                                hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).13),
                                                                res: Local(
                                                                    HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).4),
                                                                ),
                                                                args: None,
                                                                infer_args: true,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ),
                                            span: src/a/fun_method.rs:38:16: 38:17 (#0),
                                        },
                                        Expr {
                                            hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).14),
                                            kind: Lit(
                                                Spanned {
                                                    node: Int(
                                                        Pu128(
                                                            2,
                                                        ),
                                                        Unsuffixed,
                                                    ),
                                                    span: src/a/fun_method.rs:38:20: 38:21 (#0),
                                                },
                                            ),
                                            span: src/a/fun_method.rs:38:20: 38:21 (#0),
                                        },
                                    ),
                                    span: src/a/fun_method.rs:38:16: 38:21 (#0),
                                },
                            ),
                        ),
                        span: src/a/fun_method.rs:38:9: 38:21 (#0),
                    },
                ),
                span: src/a/fun_method.rs:38:9: 38:22 (#0),
            },
        ],
        expr: None,
        hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).16),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:36:46: 39:6 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "self.bla()",
)
Entering expr: MethodCall(
    PathSegment {
        ident: bla#0,
        hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).6),
        res: Err,
        args: None,
        infer_args: true,
    },
    Expr {
        hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).7),
        kind: Path(
            Resolved(
                None,
                Path {
                    span: src/a/fun_method.rs:37:9: 37:13 (#0),
                    res: Local(
                        HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).2),
                    ),
                    segments: [
                        PathSegment {
                            ident: self#0,
                            hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).8),
                            res: Local(
                                HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).2),
                            ),
                            args: None,
                            infer_args: true,
                        },
                    ],
                },
            ),
        ),
        span: src/a/fun_method.rs:37:9: 37:13 (#0),
    },
    [],
    src/a/fun_method.rs:37:14: 37:19 (#0),
)
new static call: Call {
    call_expr: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).5),
    call_expr_span: src/a/fun_method.rs:37:9: 37:19 (#0),
    caller: Some(
        DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1),
    ),
    caller_span: None,
    callee: DefId(0:11 ~ example_code[e214]::a::fun_method::{impl#0}::bla),
    callee_span: src/a/fun_method.rs:24:5: 29:6 (#0),
    callee_path: "a::fun_method::S::bla",
    constraint_depth: 0,
}
The code is Ok(
    "self",
)
Entering expr: Path(
    Resolved(
        None,
        Path {
            span: src/a/fun_method.rs:37:9: 37:13 (#0),
            res: Local(
                HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).2),
            ),
            segments: [
                PathSegment {
                    ident: self#0,
                    hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).8),
                    res: Local(
                        HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).2),
                    ),
                    args: None,
                    infer_args: true,
                },
            ],
        },
    ),
)
The code is Ok(
    "return a + 2",
)
Entering expr: Ret(
    Some(
        Expr {
            hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).11),
            kind: Binary(
                Spanned {
                    node: Add,
                    span: src/a/fun_method.rs:38:18: 38:19 (#0),
                },
                Expr {
                    hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).12),
                    kind: Path(
                        Resolved(
                            None,
                            Path {
                                span: src/a/fun_method.rs:38:16: 38:17 (#0),
                                res: Local(
                                    HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).4),
                                ),
                                segments: [
                                    PathSegment {
                                        ident: a#0,
                                        hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).13),
                                        res: Local(
                                            HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).4),
                                        ),
                                        args: None,
                                        infer_args: true,
                                    },
                                ],
                            },
                        ),
                    ),
                    span: src/a/fun_method.rs:38:16: 38:17 (#0),
                },
                Expr {
                    hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).14),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    2,
                                ),
                                Unsuffixed,
                            ),
                            span: src/a/fun_method.rs:38:20: 38:21 (#0),
                        },
                    ),
                    span: src/a/fun_method.rs:38:20: 38:21 (#0),
                },
            ),
            span: src/a/fun_method.rs:38:16: 38:21 (#0),
        },
    ),
)
The code is Ok(
    "a + 2",
)
Entering expr: Binary(
    Spanned {
        node: Add,
        span: src/a/fun_method.rs:38:18: 38:19 (#0),
    },
    Expr {
        hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).12),
        kind: Path(
            Resolved(
                None,
                Path {
                    span: src/a/fun_method.rs:38:16: 38:17 (#0),
                    res: Local(
                        HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).4),
                    ),
                    segments: [
                        PathSegment {
                            ident: a#0,
                            hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).13),
                            res: Local(
                                HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).4),
                            ),
                            args: None,
                            infer_args: true,
                        },
                    ],
                },
            ),
        ),
        span: src/a/fun_method.rs:38:16: 38:17 (#0),
    },
    Expr {
        hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).14),
        kind: Lit(
            Spanned {
                node: Int(
                    Pu128(
                        2,
                    ),
                    Unsuffixed,
                ),
                span: src/a/fun_method.rs:38:20: 38:21 (#0),
            },
        ),
        span: src/a/fun_method.rs:38:20: 38:21 (#0),
    },
)
The code is Ok(
    "a",
)
Entering expr: Path(
    Resolved(
        None,
        Path {
            span: src/a/fun_method.rs:38:16: 38:17 (#0),
            res: Local(
                HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).4),
            ),
            segments: [
                PathSegment {
                    ident: a#0,
                    hir_id: HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).13),
                    res: Local(
                        HirId(DefId(0:13 ~ example_code[e214]::a::fun_method::{impl#0}::test_while1).4),
                    ),
                    args: None,
                    infer_args: true,
                },
            ],
        },
    ),
)
The code is Ok(
    "2",
)
Entering expr: Lit(
    Spanned {
        node: Int(
            Pu128(
                2,
            ),
            Unsuffixed,
        ),
        span: src/a/fun_method.rs:38:20: 38:21 (#0),
    },
)
The code is Ok(
    "{\n        // 假设 S 能生成一个字符的 Vec\n        vec!['a', 'b', 'c'].into_iter() // 示例：S 迭代 'a', 'b', 'c'\n    }",
)
Entering expr: Block(
    Block {
        stmts: [],
        expr: Some(
            Expr {
                hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).3),
                kind: MethodCall(
                    PathSegment {
                        ident: into_iter#0,
                        hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).4),
                        res: Err,
                        args: None,
                        infer_args: true,
                    },
                    Expr {
                        hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).5),
                        kind: Call(
                            Expr {
                                hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).6),
                                kind: Path(
                                    TypeRelative(
                                        Ty {
                                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).8),
                                            kind: Slice(
                                                Ty {
                                                    hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).7),
                                                    kind: Infer,
                                                    span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:50:11: 50:12 (#8),
                                                },
                                            ),
                                            span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:50:10: 50:13 (#8),
                                        },
                                        PathSegment {
                                            ident: into_vec#8,
                                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).9),
                                            res: Err,
                                            args: None,
                                            infer_args: true,
                                        },
                                    ),
                                ),
                                span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:50:9: 50:24 (#8),
                            },
                            [
                                Expr {
                                    hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).10),
                                    kind: Call(
                                        Expr {
                                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).11),
                                            kind: Path(
                                                TypeRelative(
                                                    Ty {
                                                        hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).15),
                                                        kind: Path(
                                                            Resolved(
                                                                None,
                                                                Path {
                                                                    span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:31 (#8),
                                                                    res: Def(
                                                                        Struct,
                                                                        DefId(5:299 ~ alloc[186e]::boxed::Box),
                                                                    ),
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: $crate#8,
                                                                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).12),
                                                                            res: Err,
                                                                            args: None,
                                                                            infer_args: true,
                                                                        },
                                                                        PathSegment {
                                                                            ident: boxed#8,
                                                                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).13),
                                                                            res: Def(
                                                                                Mod,
                                                                                DefId(5:136 ~ alloc[186e]::boxed),
                                                                            ),
                                                                            args: None,
                                                                            infer_args: true,
                                                                        },
                                                                        PathSegment {
                                                                            ident: Box#8,
                                                                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).14),
                                                                            res: Def(
                                                                                Struct,
                                                                                DefId(5:299 ~ alloc[186e]::boxed::Box),
                                                                            ),
                                                                            args: None,
                                                                            infer_args: true,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:31 (#8),
                                                    },
                                                    PathSegment {
                                                        ident: new#8,
                                                        hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).16),
                                                        res: Err,
                                                        args: None,
                                                        infer_args: true,
                                                    },
                                                ),
                                            ),
                                            span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:36 (#8),
                                        },
                                        [
                                            Expr {
                                                hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).17),
                                                kind: Array(
                                                    [
                                                        Expr {
                                                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).18),
                                                            kind: Lit(
                                                                Spanned {
                                                                    node: Char(
                                                                        'a',
                                                                    ),
                                                                    span: src/a/fun_method.rs:49:14: 49:17 (#0),
                                                                },
                                                            ),
                                                            span: src/a/fun_method.rs:49:14: 49:17 (#0),
                                                        },
                                                        Expr {
                                                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).19),
                                                            kind: Lit(
                                                                Spanned {
                                                                    node: Char(
                                                                        'b',
                                                                    ),
                                                                    span: src/a/fun_method.rs:49:19: 49:22 (#0),
                                                                },
                                                            ),
                                                            span: src/a/fun_method.rs:49:19: 49:22 (#0),
                                                        },
                                                        Expr {
                                                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).20),
                                                            kind: Lit(
                                                                Spanned {
                                                                    node: Char(
                                                                        'c',
                                                                    ),
                                                                    span: src/a/fun_method.rs:49:24: 49:27 (#0),
                                                                },
                                                            ),
                                                            span: src/a/fun_method.rs:49:24: 49:27 (#0),
                                                        },
                                                    ],
                                                ),
                                                span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:37: 54:46 (#8),
                                            },
                                        ],
                                    ),
                                    span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:47 (#8),
                                },
                            ],
                        ),
                        span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:50:9: 55:10 (#8),
                    },
                    [],
                    src/a/fun_method.rs:49:29: 49:40 (#0),
                ),
                span: src/a/fun_method.rs:49:9: 49:40 (#0),
            },
        ),
        hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).21),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:47:42: 50:6 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "vec!['a', 'b', 'c'].into_iter()",
)
Entering expr: MethodCall(
    PathSegment {
        ident: into_iter#0,
        hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).4),
        res: Err,
        args: None,
        infer_args: true,
    },
    Expr {
        hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).5),
        kind: Call(
            Expr {
                hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).6),
                kind: Path(
                    TypeRelative(
                        Ty {
                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).8),
                            kind: Slice(
                                Ty {
                                    hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).7),
                                    kind: Infer,
                                    span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:50:11: 50:12 (#8),
                                },
                            ),
                            span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:50:10: 50:13 (#8),
                        },
                        PathSegment {
                            ident: into_vec#8,
                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).9),
                            res: Err,
                            args: None,
                            infer_args: true,
                        },
                    ),
                ),
                span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:50:9: 50:24 (#8),
            },
            [
                Expr {
                    hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).10),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).11),
                            kind: Path(
                                TypeRelative(
                                    Ty {
                                        hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).15),
                                        kind: Path(
                                            Resolved(
                                                None,
                                                Path {
                                                    span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:31 (#8),
                                                    res: Def(
                                                        Struct,
                                                        DefId(5:299 ~ alloc[186e]::boxed::Box),
                                                    ),
                                                    segments: [
                                                        PathSegment {
                                                            ident: $crate#8,
                                                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).12),
                                                            res: Err,
                                                            args: None,
                                                            infer_args: true,
                                                        },
                                                        PathSegment {
                                                            ident: boxed#8,
                                                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).13),
                                                            res: Def(
                                                                Mod,
                                                                DefId(5:136 ~ alloc[186e]::boxed),
                                                            ),
                                                            args: None,
                                                            infer_args: true,
                                                        },
                                                        PathSegment {
                                                            ident: Box#8,
                                                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).14),
                                                            res: Def(
                                                                Struct,
                                                                DefId(5:299 ~ alloc[186e]::boxed::Box),
                                                            ),
                                                            args: None,
                                                            infer_args: true,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ),
                                        span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:31 (#8),
                                    },
                                    PathSegment {
                                        ident: new#8,
                                        hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).16),
                                        res: Err,
                                        args: None,
                                        infer_args: true,
                                    },
                                ),
                            ),
                            span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:36 (#8),
                        },
                        [
                            Expr {
                                hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).17),
                                kind: Array(
                                    [
                                        Expr {
                                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).18),
                                            kind: Lit(
                                                Spanned {
                                                    node: Char(
                                                        'a',
                                                    ),
                                                    span: src/a/fun_method.rs:49:14: 49:17 (#0),
                                                },
                                            ),
                                            span: src/a/fun_method.rs:49:14: 49:17 (#0),
                                        },
                                        Expr {
                                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).19),
                                            kind: Lit(
                                                Spanned {
                                                    node: Char(
                                                        'b',
                                                    ),
                                                    span: src/a/fun_method.rs:49:19: 49:22 (#0),
                                                },
                                            ),
                                            span: src/a/fun_method.rs:49:19: 49:22 (#0),
                                        },
                                        Expr {
                                            hir_id: HirId(DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter).20),
                                            kind: Lit(
                                                Spanned {
                                                    node: Char(
                                                        'c',
                                                    ),
                                                    span: src/a/fun_method.rs:49:24: 49:27 (#0),
                                                },
                                            ),
                                            span: src/a/fun_method.rs:49:24: 49:27 (#0),
                                        },
                                    ],
                                ),
                                span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:37: 54:46 (#8),
                            },
                        ],
                    ),
                    span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:47 (#8),
                },
            ],
        ),
        span: /home/cindy/.rustup/toolchains/nightly-2024-08-07-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:50:9: 55:10 (#8),
    },
    [],
    src/a/fun_method.rs:49:29: 49:40 (#0),
)
The code is Ok(
    "{\n        a == 1\n    }",
)
Entering expr: Block(
    Block {
        stmts: [],
        expr: Some(
            Expr {
                hir_id: HirId(DefId(0:21 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla).3),
                kind: Binary(
                    Spanned {
                        node: Eq,
                        span: src/a/fun_method.rs:58:11: 58:13 (#0),
                    },
                    Expr {
                        hir_id: HirId(DefId(0:21 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla).4),
                        kind: Path(
                            Resolved(
                                None,
                                Path {
                                    span: src/a/fun_method.rs:58:9: 58:10 (#0),
                                    res: Local(
                                        HirId(DefId(0:21 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla).2),
                                    ),
                                    segments: [
                                        PathSegment {
                                            ident: a#0,
                                            hir_id: HirId(DefId(0:21 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla).5),
                                            res: Local(
                                                HirId(DefId(0:21 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla).2),
                                            ),
                                            args: None,
                                            infer_args: true,
                                        },
                                    ],
                                },
                            ),
                        ),
                        span: src/a/fun_method.rs:58:9: 58:10 (#0),
                    },
                    Expr {
                        hir_id: HirId(DefId(0:21 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla).6),
                        kind: Lit(
                            Spanned {
                                node: Int(
                                    Pu128(
                                        1,
                                    ),
                                    Unsuffixed,
                                ),
                                span: src/a/fun_method.rs:58:14: 58:15 (#0),
                            },
                        ),
                        span: src/a/fun_method.rs:58:14: 58:15 (#0),
                    },
                ),
                span: src/a/fun_method.rs:58:9: 58:15 (#0),
            },
        ),
        hir_id: HirId(DefId(0:21 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla).7),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:57:44: 59:6 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "a == 1",
)
Entering expr: Binary(
    Spanned {
        node: Eq,
        span: src/a/fun_method.rs:58:11: 58:13 (#0),
    },
    Expr {
        hir_id: HirId(DefId(0:21 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla).4),
        kind: Path(
            Resolved(
                None,
                Path {
                    span: src/a/fun_method.rs:58:9: 58:10 (#0),
                    res: Local(
                        HirId(DefId(0:21 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla).2),
                    ),
                    segments: [
                        PathSegment {
                            ident: a#0,
                            hir_id: HirId(DefId(0:21 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla).5),
                            res: Local(
                                HirId(DefId(0:21 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla).2),
                            ),
                            args: None,
                            infer_args: true,
                        },
                    ],
                },
            ),
        ),
        span: src/a/fun_method.rs:58:9: 58:10 (#0),
    },
    Expr {
        hir_id: HirId(DefId(0:21 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla).6),
        kind: Lit(
            Spanned {
                node: Int(
                    Pu128(
                        1,
                    ),
                    Unsuffixed,
                ),
                span: src/a/fun_method.rs:58:14: 58:15 (#0),
            },
        ),
        span: src/a/fun_method.rs:58:14: 58:15 (#0),
    },
)
The code is Ok(
    "a",
)
Entering expr: Path(
    Resolved(
        None,
        Path {
            span: src/a/fun_method.rs:58:9: 58:10 (#0),
            res: Local(
                HirId(DefId(0:21 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla).2),
            ),
            segments: [
                PathSegment {
                    ident: a#0,
                    hir_id: HirId(DefId(0:21 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla).5),
                    res: Local(
                        HirId(DefId(0:21 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla).2),
                    ),
                    args: None,
                    infer_args: true,
                },
            ],
        },
    ),
)
The code is Ok(
    "1",
)
Entering expr: Lit(
    Spanned {
        node: Int(
            Pu128(
                1,
            ),
            Unsuffixed,
        ),
        span: src/a/fun_method.rs:58:14: 58:15 (#0),
    },
)
The code is Ok(
    "{\n        a == 2\n    }",
)
Entering expr: Block(
    Block {
        stmts: [],
        expr: Some(
            Expr {
                hir_id: HirId(DefId(0:22 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla1).3),
                kind: Binary(
                    Spanned {
                        node: Eq,
                        span: src/a/fun_method.rs:62:11: 62:13 (#0),
                    },
                    Expr {
                        hir_id: HirId(DefId(0:22 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla1).4),
                        kind: Path(
                            Resolved(
                                None,
                                Path {
                                    span: src/a/fun_method.rs:62:9: 62:10 (#0),
                                    res: Local(
                                        HirId(DefId(0:22 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla1).2),
                                    ),
                                    segments: [
                                        PathSegment {
                                            ident: a#0,
                                            hir_id: HirId(DefId(0:22 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla1).5),
                                            res: Local(
                                                HirId(DefId(0:22 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla1).2),
                                            ),
                                            args: None,
                                            infer_args: true,
                                        },
                                    ],
                                },
                            ),
                        ),
                        span: src/a/fun_method.rs:62:9: 62:10 (#0),
                    },
                    Expr {
                        hir_id: HirId(DefId(0:22 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla1).6),
                        kind: Lit(
                            Spanned {
                                node: Int(
                                    Pu128(
                                        2,
                                    ),
                                    Unsuffixed,
                                ),
                                span: src/a/fun_method.rs:62:14: 62:15 (#0),
                            },
                        ),
                        span: src/a/fun_method.rs:62:14: 62:15 (#0),
                    },
                ),
                span: src/a/fun_method.rs:62:9: 62:15 (#0),
            },
        ),
        hir_id: HirId(DefId(0:22 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla1).7),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:61:45: 63:6 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "a == 2",
)
Entering expr: Binary(
    Spanned {
        node: Eq,
        span: src/a/fun_method.rs:62:11: 62:13 (#0),
    },
    Expr {
        hir_id: HirId(DefId(0:22 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla1).4),
        kind: Path(
            Resolved(
                None,
                Path {
                    span: src/a/fun_method.rs:62:9: 62:10 (#0),
                    res: Local(
                        HirId(DefId(0:22 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla1).2),
                    ),
                    segments: [
                        PathSegment {
                            ident: a#0,
                            hir_id: HirId(DefId(0:22 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla1).5),
                            res: Local(
                                HirId(DefId(0:22 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla1).2),
                            ),
                            args: None,
                            infer_args: true,
                        },
                    ],
                },
            ),
        ),
        span: src/a/fun_method.rs:62:9: 62:10 (#0),
    },
    Expr {
        hir_id: HirId(DefId(0:22 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla1).6),
        kind: Lit(
            Spanned {
                node: Int(
                    Pu128(
                        2,
                    ),
                    Unsuffixed,
                ),
                span: src/a/fun_method.rs:62:14: 62:15 (#0),
            },
        ),
        span: src/a/fun_method.rs:62:14: 62:15 (#0),
    },
)
The code is Ok(
    "a",
)
Entering expr: Path(
    Resolved(
        None,
        Path {
            span: src/a/fun_method.rs:62:9: 62:10 (#0),
            res: Local(
                HirId(DefId(0:22 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla1).2),
            ),
            segments: [
                PathSegment {
                    ident: a#0,
                    hir_id: HirId(DefId(0:22 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla1).5),
                    res: Local(
                        HirId(DefId(0:22 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla1).2),
                    ),
                    args: None,
                    infer_args: true,
                },
            ],
        },
    ),
)
The code is Ok(
    "2",
)
Entering expr: Lit(
    Spanned {
        node: Int(
            Pu128(
                2,
            ),
            Unsuffixed,
        ),
        span: src/a/fun_method.rs:62:14: 62:15 (#0),
    },
)
The code is Ok(
    "{\n        a == 3\n    }",
)
Entering expr: Block(
    Block {
        stmts: [],
        expr: Some(
            Expr {
                hir_id: HirId(DefId(0:23 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla2).3),
                kind: Binary(
                    Spanned {
                        node: Eq,
                        span: src/a/fun_method.rs:66:11: 66:13 (#0),
                    },
                    Expr {
                        hir_id: HirId(DefId(0:23 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla2).4),
                        kind: Path(
                            Resolved(
                                None,
                                Path {
                                    span: src/a/fun_method.rs:66:9: 66:10 (#0),
                                    res: Local(
                                        HirId(DefId(0:23 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla2).2),
                                    ),
                                    segments: [
                                        PathSegment {
                                            ident: a#0,
                                            hir_id: HirId(DefId(0:23 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla2).5),
                                            res: Local(
                                                HirId(DefId(0:23 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla2).2),
                                            ),
                                            args: None,
                                            infer_args: true,
                                        },
                                    ],
                                },
                            ),
                        ),
                        span: src/a/fun_method.rs:66:9: 66:10 (#0),
                    },
                    Expr {
                        hir_id: HirId(DefId(0:23 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla2).6),
                        kind: Lit(
                            Spanned {
                                node: Int(
                                    Pu128(
                                        3,
                                    ),
                                    Unsuffixed,
                                ),
                                span: src/a/fun_method.rs:66:14: 66:15 (#0),
                            },
                        ),
                        span: src/a/fun_method.rs:66:14: 66:15 (#0),
                    },
                ),
                span: src/a/fun_method.rs:66:9: 66:15 (#0),
            },
        ),
        hir_id: HirId(DefId(0:23 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla2).7),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:65:45: 67:6 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "a == 3",
)
Entering expr: Binary(
    Spanned {
        node: Eq,
        span: src/a/fun_method.rs:66:11: 66:13 (#0),
    },
    Expr {
        hir_id: HirId(DefId(0:23 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla2).4),
        kind: Path(
            Resolved(
                None,
                Path {
                    span: src/a/fun_method.rs:66:9: 66:10 (#0),
                    res: Local(
                        HirId(DefId(0:23 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla2).2),
                    ),
                    segments: [
                        PathSegment {
                            ident: a#0,
                            hir_id: HirId(DefId(0:23 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla2).5),
                            res: Local(
                                HirId(DefId(0:23 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla2).2),
                            ),
                            args: None,
                            infer_args: true,
                        },
                    ],
                },
            ),
        ),
        span: src/a/fun_method.rs:66:9: 66:10 (#0),
    },
    Expr {
        hir_id: HirId(DefId(0:23 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla2).6),
        kind: Lit(
            Spanned {
                node: Int(
                    Pu128(
                        3,
                    ),
                    Unsuffixed,
                ),
                span: src/a/fun_method.rs:66:14: 66:15 (#0),
            },
        ),
        span: src/a/fun_method.rs:66:14: 66:15 (#0),
    },
)
The code is Ok(
    "a",
)
Entering expr: Path(
    Resolved(
        None,
        Path {
            span: src/a/fun_method.rs:66:9: 66:10 (#0),
            res: Local(
                HirId(DefId(0:23 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla2).2),
            ),
            segments: [
                PathSegment {
                    ident: a#0,
                    hir_id: HirId(DefId(0:23 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla2).5),
                    res: Local(
                        HirId(DefId(0:23 ~ example_code[e214]::a::fun_method::{impl#2}::should_call_bla2).2),
                    ),
                    args: None,
                    infer_args: true,
                },
            ],
        },
    ),
)
The code is Ok(
    "3",
)
Entering expr: Lit(
    Spanned {
        node: Int(
            Pu128(
                3,
            ),
            Unsuffixed,
        ),
        span: src/a/fun_method.rs:66:14: 66:15 (#0),
    },
)
The code is Ok(
    "{\n        let _i = 6;\n        return true;\n    }",
)
Entering expr: Block(
    Block {
        stmts: [
            Stmt {
                hir_id: HirId(DefId(0:25 ~ example_code[e214]::a::fun_method::{impl#3}::bla).3),
                kind: Let(
                    LetStmt {
                        pat: Pat {
                            hir_id: HirId(DefId(0:25 ~ example_code[e214]::a::fun_method::{impl#3}::bla).6),
                            kind: Binding(
                                BindingMode(
                                    No,
                                    Not,
                                ),
                                HirId(DefId(0:25 ~ example_code[e214]::a::fun_method::{impl#3}::bla).6),
                                _i#0,
                                None,
                            ),
                            span: src/a/fun_method.rs:72:13: 72:15 (#0),
                            default_binding_modes: true,
                        },
                        ty: None,
                        init: Some(
                            Expr {
                                hir_id: HirId(DefId(0:25 ~ example_code[e214]::a::fun_method::{impl#3}::bla).4),
                                kind: Lit(
                                    Spanned {
                                        node: Int(
                                            Pu128(
                                                6,
                                            ),
                                            Unsuffixed,
                                        ),
                                        span: src/a/fun_method.rs:72:18: 72:19 (#0),
                                    },
                                ),
                                span: src/a/fun_method.rs:72:18: 72:19 (#0),
                            },
                        ),
                        els: None,
                        hir_id: HirId(DefId(0:25 ~ example_code[e214]::a::fun_method::{impl#3}::bla).5),
                        span: src/a/fun_method.rs:72:9: 72:20 (#0),
                        source: Normal,
                    },
                ),
                span: src/a/fun_method.rs:72:9: 72:20 (#0),
            },
            Stmt {
                hir_id: HirId(DefId(0:25 ~ example_code[e214]::a::fun_method::{impl#3}::bla).9),
                kind: Semi(
                    Expr {
                        hir_id: HirId(DefId(0:25 ~ example_code[e214]::a::fun_method::{impl#3}::bla).7),
                        kind: Ret(
                            Some(
                                Expr {
                                    hir_id: HirId(DefId(0:25 ~ example_code[e214]::a::fun_method::{impl#3}::bla).8),
                                    kind: Lit(
                                        Spanned {
                                            node: Bool(
                                                true,
                                            ),
                                            span: src/a/fun_method.rs:73:16: 73:20 (#0),
                                        },
                                    ),
                                    span: src/a/fun_method.rs:73:16: 73:20 (#0),
                                },
                            ),
                        ),
                        span: src/a/fun_method.rs:73:9: 73:20 (#0),
                    },
                ),
                span: src/a/fun_method.rs:73:9: 73:21 (#0),
            },
        ],
        expr: None,
        hir_id: HirId(DefId(0:25 ~ example_code[e214]::a::fun_method::{impl#3}::bla).10),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:71:27: 74:6 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "6",
)
Entering expr: Lit(
    Spanned {
        node: Int(
            Pu128(
                6,
            ),
            Unsuffixed,
        ),
        span: src/a/fun_method.rs:72:18: 72:19 (#0),
    },
)
The code is Ok(
    "return true",
)
Entering expr: Ret(
    Some(
        Expr {
            hir_id: HirId(DefId(0:25 ~ example_code[e214]::a::fun_method::{impl#3}::bla).8),
            kind: Lit(
                Spanned {
                    node: Bool(
                        true,
                    ),
                    span: src/a/fun_method.rs:73:16: 73:20 (#0),
                },
            ),
            span: src/a/fun_method.rs:73:16: 73:20 (#0),
        },
    ),
)
The code is Ok(
    "true",
)
Entering expr: Lit(
    Spanned {
        node: Bool(
            true,
        ),
        span: src/a/fun_method.rs:73:16: 73:20 (#0),
    },
)
The code is Ok(
    "{\n        let _x = 4;\n        return true;\n    }",
)
Entering expr: Block(
    Block {
        stmts: [
            Stmt {
                hir_id: HirId(DefId(0:29 ~ example_code[e214]::a::fun_method::{impl#4}::bla).3),
                kind: Let(
                    LetStmt {
                        pat: Pat {
                            hir_id: HirId(DefId(0:29 ~ example_code[e214]::a::fun_method::{impl#4}::bla).6),
                            kind: Binding(
                                BindingMode(
                                    No,
                                    Not,
                                ),
                                HirId(DefId(0:29 ~ example_code[e214]::a::fun_method::{impl#4}::bla).6),
                                _x#0,
                                None,
                            ),
                            span: src/a/fun_method.rs:81:13: 81:15 (#0),
                            default_binding_modes: true,
                        },
                        ty: None,
                        init: Some(
                            Expr {
                                hir_id: HirId(DefId(0:29 ~ example_code[e214]::a::fun_method::{impl#4}::bla).4),
                                kind: Lit(
                                    Spanned {
                                        node: Int(
                                            Pu128(
                                                4,
                                            ),
                                            Unsuffixed,
                                        ),
                                        span: src/a/fun_method.rs:81:18: 81:19 (#0),
                                    },
                                ),
                                span: src/a/fun_method.rs:81:18: 81:19 (#0),
                            },
                        ),
                        els: None,
                        hir_id: HirId(DefId(0:29 ~ example_code[e214]::a::fun_method::{impl#4}::bla).5),
                        span: src/a/fun_method.rs:81:9: 81:20 (#0),
                        source: Normal,
                    },
                ),
                span: src/a/fun_method.rs:81:9: 81:20 (#0),
            },
            Stmt {
                hir_id: HirId(DefId(0:29 ~ example_code[e214]::a::fun_method::{impl#4}::bla).9),
                kind: Semi(
                    Expr {
                        hir_id: HirId(DefId(0:29 ~ example_code[e214]::a::fun_method::{impl#4}::bla).7),
                        kind: Ret(
                            Some(
                                Expr {
                                    hir_id: HirId(DefId(0:29 ~ example_code[e214]::a::fun_method::{impl#4}::bla).8),
                                    kind: Lit(
                                        Spanned {
                                            node: Bool(
                                                true,
                                            ),
                                            span: src/a/fun_method.rs:82:16: 82:20 (#0),
                                        },
                                    ),
                                    span: src/a/fun_method.rs:82:16: 82:20 (#0),
                                },
                            ),
                        ),
                        span: src/a/fun_method.rs:82:9: 82:20 (#0),
                    },
                ),
                span: src/a/fun_method.rs:82:9: 82:21 (#0),
            },
        ],
        expr: None,
        hir_id: HirId(DefId(0:29 ~ example_code[e214]::a::fun_method::{impl#4}::bla).10),
        rules: DefaultBlock,
        span: src/a/fun_method.rs:80:27: 83:6 (#0),
        targeted_by_break: false,
    },
    None,
)
The code is Ok(
    "4",
)
Entering expr: Lit(
    Spanned {
        node: Int(
            Pu128(
                4,
            ),
            Unsuffixed,
        ),
        span: src/a/fun_method.rs:81:18: 81:19 (#0),
    },
)
The code is Ok(
    "return true",
)
Entering expr: Ret(
    Some(
        Expr {
            hir_id: HirId(DefId(0:29 ~ example_code[e214]::a::fun_method::{impl#4}::bla).8),
            kind: Lit(
                Spanned {
                    node: Bool(
                        true,
                    ),
                    span: src/a/fun_method.rs:82:16: 82:20 (#0),
                },
            ),
            span: src/a/fun_method.rs:82:16: 82:20 (#0),
        },
    ),
)
The code is Ok(
    "true",
)
Entering expr: Lit(
    Spanned {
        node: Bool(
            true,
        ),
        span: src/a/fun_method.rs:82:16: 82:20 (#0),
    },
)
Functions:
  Function: a::fun_method::S1::should_call_bla, Span: src/a/fun_method.rs:57:5: 59:6 (#0)
  Function: a::fun_method::S::test_while1, Span: src/a/fun_method.rs:36:5: 39:6 (#0)
  Function: a::fun_method::S::bla, Span: src/a/fun_method.rs:24:5: 29:6 (#0)
  Function: <a::fun_method::R as a::fun_method::T>::bla, Span: src/a/fun_method.rs:80:5: 83:6 (#0)
  Function: a::fun_method::S1::should_call_bla2, Span: src/a/fun_method.rs:65:5: 67:6 (#0)
  Function: main, Span: src/main.rs:4:1: 46:2 (#0)
  Function: a::fun_method::S::met, Span: src/a/fun_method.rs:10:5: 15:6 (#0)
  Function: a::fun_method::S1::should_call_bla1, Span: src/a/fun_method.rs:61:5: 63:6 (#0)
  Function: <a::fun_method::S as std::iter::IntoIterator>::into_iter, Span: src/a/fun_method.rs:47:5: 50:6 (#0)
  Function: a::fun_method::_virt, Span: src/a/fun_method.rs:86:1: 88:2 (#0)
  Function: a::fun_method::S::test_while, Span: src/a/fun_method.rs:31:5: 34:6 (#0)
  Function: a::fun_method::apply_ascii_deny_list_to_potentially_upper_case_ascii, Span: src/a/fun_method.rs:101:1: 107:2 (#0)
  Function: a::fun_method::T::bla, Span: src/a/fun_method.rs:4:5: 4:56 (#0)
  Function: a::fun_method::test_between_module, Span: src/a/fun_method.rs:91:1: 99:2 (#0)
  Function: <a::fun_method::S as a::fun_method::T>::bla, Span: src/a/fun_method.rs:71:5: 74:6 (#0)

Method Declarations:
  Method Declaration: a::fun_method::T::bla

Method Implementations:
  Method Implementation for std::iter::IntoIterator::into_iter: [DefId(0:17 ~ example_code[e214]::a::fun_method::{impl#1}::into_iter)]
  Method Implementation for a::fun_method::T::bla: [DefId(0:6 ~ example_code[e214]::a::fun_method::T::bla), DefId(0:25 ~ example_code[e214]::a::fun_method::{impl#3}::bla), DefId(0:29 ~ example_code[e214]::a::fun_method::{impl#4}::bla)]

Static Calls:
a::fun_method::S::met --- a::fun_method::S::bla (Constraint Depth: 1)
a::fun_method::S::test_while1 --- a::fun_method::S::bla (Constraint Depth: 0)
a::fun_method::S::test_while --- a::fun_method::S::bla (Constraint Depth: 0)

Dynamic Calls:
a::fun_method::_virt --- a::fun_method::T::bla (Constraint Depth: 0)

Non Local Calls:
<a::fun_method::S as std::iter::IntoIterator>::into_iter --- <std::vec::Vec<T, A> as std::iter::IntoIterator>::into_iter (Constraint Depth: 0)
